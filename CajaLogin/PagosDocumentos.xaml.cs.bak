using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Controls;
using System.Windows.Data;
using System.IO;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Collections.ObjectModel;
using CajaIndu.AppPersistencia.Class.PartidasAbiertas.Estructura;
using CajaIndu.AppPersistencia.Class.PartidasAbiertas;
using CajaIndu.AppPersistencia.Class.Monitor.Estructura;
using CajaIndu.AppPersistencia.Class.Monitor;
using CajaIndu.AppPersistencia.Class.MatrizDePago.Estructura;
using CajaIndu.AppPersistencia.Class.MatrizDePago;
using CajaIndu.AppPersistencia.Class.DocumentosPagosMasivos;
using CajaIndu.AppPersistencia.Class.DocumentosPagosMasivos.Estructura;
using CajaIndu.AppPersistencia.Class.StatusPagosChq;
using CajaIndu.AppPersistencia.Class.StatusPagosChq.Estructura;
using CajaIndu.AppPersistencia.Class.PagoDocumentosIngreso.Estructura;
using CajaIndu.AppPersistencia.Class.PagoDocumentosIngreso;
using CajaIndu.AppPersistencia.Class.MaestroDeBancos.Estructura;
using CajaIndu.AppPersistencia.Class.MaestroDeBancos;
using CajaIndu.AppPersistencia.Class.Login;
using CajaIndu.AppPersistencia.Class.Login.Estructura;
using CajaIndu.AppPersistencia.Class.CierreCaja.Estructura;
using CajaIndu.AppPersistencia.Class.CierreCaja;
using CajaIndu.AppPersistencia.Class.Anticipos;
using CajaIndu.AppPersistencia.Class.PagoAnticipos;
using CajaIndu.AppPersistencia.Class.PagoAnticipos.Estructura;
using CajaIndu.AppPersistencia.Class.BusquedaAnulacion.Estructura;
using CajaIndu.AppPersistencia.Class.BusquedaAnulacion;
using CajaIndu.AppPersistencia.Class.BusquedaReimpresiones.Estructura;
using CajaIndu.AppPersistencia.Class.BusquedaReimpresiones;
using CajaIndu.AppPersistencia.Class.NotasDeCredito;
using CajaIndu.AppPersistencia.Class.AnulacionComprobantes;
using CajaIndu.AppPersistencia.Class.UsuariosCaja.Estructura;
using CajaIndu.AppPersistencia.Class.UsuariosCaja;
using CajaIndu.AppPersistencia.Class.BloquearCaja;
using CajaIndu.AppPersistencia.Class.ReimpresionFiscal;
using CajaIndu.AppPersistencia.Class.ReimpresionComprobantes;
using CajaIndu.AppPersistencia.Class.ReimpresionComprobantes.Estructura;
using CajaIndu.AppPersistencia.Class.MaestroTarjetas;
using CajaIndu.AppPersistencia.Class.MaestroTarjetas.Estructura;
using CajaIndu.AppPersistencia.Class.RendicionCaja;
using CajaIndu.AppPersistencia.Class.RendicionCaja.Estructura;
using System.Windows.Shapes;
using System.Windows.Threading;
using Microsoft.Office.Interop.Excel;
using CajaIndu;



namespace CajaIndu 
{
    /// <summary>
    /// Interaction logic for Window1.xaml
    /// </summary>
    /// 


    public partial class PagosDocumentos : System.Windows.Window //, AutorizacionInterfaz
    {
        List<LOG_APERTURA> LogApert = new List<LOG_APERTURA>();
        List<DetalleViasPago> cheques = new List<DetalleViasPago>();
        List<T_DOCUMENTOS> detalledocs = new List<T_DOCUMENTOS>();
        List<T_DOCUMENTOS> partidaseleccionadas = new List<T_DOCUMENTOS>();
        public List<ViasPago> ViasPagoTransaccion = new List<ViasPago>();
        //List<T_DOCUMENTOS> partidaselecc = new List<T_DOCUMENTOS>();
        List<T_DOCUMENTOS> monitorseleccionado = new List<T_DOCUMENTOS>();
        List<CAB_COMP> cabecera = new List<CAB_COMP>();
        List<DET_COMP> detalle = new List<DET_COMP>();
        List<DET_COMP> detalleaux = new List<DET_COMP>();
        List<DOCUMENTOS> docsreimpr = new List<DOCUMENTOS>();
        List<CajaIndu.AppPersistencia.Class.ReimpresionComprobantes.Estructura.VIAS_PAGO> viaspagreimprcompr = new List<CajaIndu.AppPersistencia.Class.ReimpresionComprobantes.Estructura.VIAS_PAGO>();
        List<VIAS_PAGO2> viaspagreimpr = new List<VIAS_PAGO2>();
        List<VIAS_PAGO2> viaspagreimpraux = new List<VIAS_PAGO2>();
        NotasDeCredito notasdecredito = new NotasDeCredito();
        PartidasAbiertas partidasabiertas = new PartidasAbiertas();
        LOG_APERTURA LogOpen = new LOG_APERTURA();
       
        
        Anticipos anticipos = new Anticipos();
        DocumentosPagosMasivos documentospagosmasivos = new DocumentosPagosMasivos();
        Monitor monitor = new Monitor();
        PagoDocumentosIngreso pagodocumentosingreso = new PagoDocumentosIngreso();
        PagoAnticipos pagoanticipos = new PagoAnticipos();
        MaestroBancos maestrobancos = new MaestroBancos();
        MaestroTarjetas maestrotarjetas = new MaestroTarjetas();
        DispatcherTimer timer = new DispatcherTimer();

        //ObservableCollection<PartidasSeleccionadas> collection = new ObservableCollection<PartidasSeleccionadas>(); //coleccion que almacena lo q contiene el datagrid


        public PagosDocumentos(string usuariologg, string passlogg,string usuariotemp, string cajaconect, string sucursal, string sociedad, List<string> moneda, string pais, double monto, List<LOG_APERTURA> logapertura)
        {
            try
            {
                InitializeComponent();
                
                if (moneda.Count == 0) 
                {
                    moneda.Add("CLP");
                    moneda.Add("USS");
                }
                int test = 0;
                test = cmbMoneda.Items.Count;
                //GroupBox GBInicio = new GroupBox();
                GBInicio.Visibility = Visibility.Visible;
                GBPagoDocs.Visibility = Visibility.Collapsed;
                textBlock6.Content = cajaconect;
                textBlock7.Content = usuariologg;
                textBlock8.Content = sucursal;
                textBlock9.Content = usuariotemp ;
                lblMonto.Content = Convert.ToString(monto);
                lblSociedad.Content = sociedad;
                cmbMoneda.Items.Clear();
                cmbMoneda.ItemsSource = moneda;
                if (moneda.Count == 1)
                {
                    cmbMoneda.SelectedIndex = 0;
                }

                lblPais.Content = pais;
                lblPassword.Content = passlogg;
                DateTime result = DateTime.Today;
                datePicker1.Text = Convert.ToString(result);
                chkMonitor.IsChecked = true;
               // chkMonitor..Click = ClickMode.Press;
                if (chkMonitor.IsChecked.Value)
                {
                    timer.Interval = TimeSpan.FromSeconds(3);
                    timer.Tick += timer_Tick;
                    timer.Start();
                }
                DGLogApertura.ItemsSource= null;
                DGLogApertura.Items.Clear();
                DGLogApertura.ItemsSource = logapertura;
                //RFC PARA OBTENER LOS BANCOS
                RFC_Combo_Bancos();
                //maestrobancos.maestrobancos(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblPais.Content), Convert.ToString(cmbMoneda.Text),Convert.ToString(lblSociedad.Content));
                //if (maestrobancos.T_Retorno.Count > 0)
                //{
                //    cmbBanco.ItemsSource = null;
                //    cmbBanco.Items.Clear();
                //    List<string> listabancos = new List<string>();

                //    for (int i = 0; i < maestrobancos.T_Retorno.Count; i++)
                //    {
                //        listabancos.Add(maestrobancos.T_Retorno[i].BANKL + " - " + maestrobancos.T_Retorno[i].BANKA);
                //    }
                //    //cmbBanco.ItemsSource = maestrobancos.T_Retorno[0].BANKL + " - " + maestrobancos.T_Retorno[0].BANKA;
                //    cmbBanco.ItemsSource = listabancos;
                //}
                //else
                //{
                //    System.Windows.Forms.MessageBox.Show("No existen datos de bancos en el sistema");
                //}
               
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content),Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
            }          
        }


        private void Window_Loaded()
        {
            //throw new NotImplementedException();
            DateTime result = DateTime.Today;
            datePicker1.Text = Convert.ToString(result);
         
            
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            MainWindow frm = new MainWindow();
            frm.Visibility = Visibility.Visible;
            frm.Show();
            timer.Stop();
        }


        //MANEJO DE LOS EVENTOS ASOCIADOS A TABCONTROLS
        #region TabControl
        //EVENTO DE TAB CONTROL CUANDO ESTE CAMBIA EN EL PAGO DE DOCUMENTOS
        private void TabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
      
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            txtDocu.Text = "";
            txtDocuAnt.Text = "";
            txtRut.Text = "";
            txtRUTAnt.Text = "";
        }
        #endregion
 
        //MANEJO DE LOS EVENTOS ASOCIADOS A LOS CHECKBOXS
        #region CheckBox's
        //Check que activa desactiva manualmente el Monitor
        private void chkMonitor_Checked(object sender, RoutedEventArgs e)
        {
            timer.Start();
        }
        private void chkMonitor_UnChecked(object sender, RoutedEventArgs e)
        {
            timer.Stop();
        }
        //Check que filtra la información en Anulaciones y Reimpresiones
        private void chkFiltro_Checked(object sender, RoutedEventArgs e)
        {

            if (GBEmisionNC.IsVisible)
            {
                viaspagreimpraux.Clear();
                // viaspagreimpr.Clear();
                List<CajaIndu.AppPersistencia.Class.NotasDeCredito.Estructura.T_DOCUMENTOS> DocsAPagar = new List<CajaIndu.AppPersistencia.Class.NotasDeCredito.Estructura.T_DOCUMENTOS>();
                for (int i = 0; i < DGDocCabec.SelectedItems.Count; i++)
                {
                    {
                        DocsAPagar.Add(DGDocCabec.SelectedItems[i] as CajaIndu.AppPersistencia.Class.NotasDeCredito.Estructura.T_DOCUMENTOS);
                    }
                }
                List<VIAS_PAGO2> ListViasPagos = new List<VIAS_PAGO2>();

                for (int i = 1; i <= DGDocDet.Items.Count; i++)
                {
                    if (i == 1)
                    {
                        DGDocDet.Items.MoveCurrentToFirst();
                    }
                    if (DGDocDet.Items.CurrentItem != null)
                    {
                        ListViasPagos.Add(DGDocDet.Items.CurrentItem as VIAS_PAGO2);
                    }

                    DGDocDet.Items.MoveCurrentToNext();
                }
                viaspagreimpr.Clear();
                viaspagreimpraux.Clear();
                for (int i = 0; i < ListViasPagos.Count; i++)
                {
                    viaspagreimpr.Add(ListViasPagos[i]);
                    if (DocsAPagar[0].ID_COMPROBANTE == ListViasPagos[i].ID_COMPROBANTE)
                    {
                        viaspagreimpraux.Add(ListViasPagos[i]);
                    }
                }
                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();
                DGDocDet.ItemsSource = viaspagreimpraux;

            }
            
            if (GBAnulacion.IsVisible)
            {
                detalleaux.Clear();
                //detalle.Clear();
                List<CAB_COMP> CabeceraDocs = new List<CAB_COMP>();
                for (int i = 0; i < DGDocCabec.SelectedItems.Count; i++)
                {
                    {
                        CabeceraDocs.Add(DGDocCabec.SelectedItems[i] as CAB_COMP);
                    }
                }
                
                List<DET_COMP> DetalleDocs = new List<DET_COMP>();
                for (int i = 1; i <= DGDocDet.Items.Count; i++)
                {
                    if (i == 1)
                    {
                        DGDocDet.Items.MoveCurrentToFirst();
                    }
                    if (DGDocDet.Items.CurrentItem != null)
                    {
                        DetalleDocs.Add(DGDocDet.Items.CurrentItem as DET_COMP);
                    }

                    DGDocDet.Items.MoveCurrentToNext();
                }
                for (int i = 0; i < DetalleDocs.Count; i++)
                {
                    detalle.Add(DetalleDocs[i]);
                    if (CabeceraDocs[0].ID_COMPROBANTE == DetalleDocs[i].ID_COMPROBANTE)
                    {
                        detalleaux.Add(DetalleDocs[i]);
                    }
                }
                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();
                DGDocDet.ItemsSource = detalleaux;
            }

            if (GBReimpresion.IsVisible)
            {
                viaspagreimpraux.Clear();
               // viaspagreimpr.Clear();
                List<DOCUMENTOS> DocsAPagar = new List<DOCUMENTOS>();
                for (int i = 0; i < DGDocCabec.SelectedItems.Count; i++)
                {
                    {
                        DocsAPagar.Add(DGDocCabec.SelectedItems[i] as DOCUMENTOS);
                    }
                }
                List<VIAS_PAGO2> ListViasPagos = new List<VIAS_PAGO2>();

                for (int i = 1; i <= DGDocDet.Items.Count; i++)
                {
                    if (i == 1)
                    {
                        DGDocDet.Items.MoveCurrentToFirst();
                    }
                    if (DGDocDet.Items.CurrentItem != null)
                    {
                        ListViasPagos.Add(DGDocDet.Items.CurrentItem as VIAS_PAGO2);
                    }

                    DGDocDet.Items.MoveCurrentToNext();
                }
                viaspagreimpr.Clear();
                viaspagreimpraux.Clear();
                for (int i = 0; i < ListViasPagos.Count; i++)
                {
                   viaspagreimpr.Add(ListViasPagos[i]);
                    if (DocsAPagar[0].ID_COMPROBANTE == ListViasPagos[i].ID_COMPROBANTE)
                    {
                        viaspagreimpraux.Add(ListViasPagos[i]);
                    }
                }
                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();
                DGDocDet.ItemsSource = viaspagreimpraux;
        }
        }
        private void chkFiltro_UnChecked(object sender, RoutedEventArgs e)
        {
            if (GBAnulacion.IsVisible)
            {
                
                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();
                DGDocDet.ItemsSource = detalle;
                detalleaux.Clear();
                //detalle.Clear();
            }
            if ((GBReimpresion.IsVisible) | (GBEmisionNC.IsVisible))
            {
                
                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();
                DGDocDet.ItemsSource = viaspagreimpr;
                viaspagreimpraux.Clear();
                //viaspagreimpr.Clear();

            }
          
            
        }


        #endregion

        //MANEJO DE LOS EVENTOS ASOCIADOS A LOS BOTONES
        #region Botones

        //CONEXION A LA RFC DEL MONITOR EN MODO MANUAL
        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //RFC del Monitor por boton Refresh 
                monitor.ObjDatosMonitor.Clear();
                monitor.monitor(Convert.ToString(datePicker1.SelectedDate.Value), Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content));
                if (monitor.ObjDatosMonitor.Count > 0)
                {
                    DGMonitor.ItemsSource = null;
                    DGMonitor.Items.Clear();
                    DGMonitor.ItemsSource = monitor.ObjDatosMonitor;
                    //MessageBox.Show("Conectandose a la RFC del Monitor en modo manual");
                }
            }
            catch  (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
            }                 
        }
                    
        
        //CLICK BOTON DE BARRA DE HERRAMIENTAS QUE ACTIVA EL PAGO DE DOCUMENTOS
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
          
            GBPagoDocs.Visibility = Visibility.Visible;
            GBInicio.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Collapsed;
            GBReimpresion.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Collapsed;
            GBRendicion.Visibility = Visibility.Collapsed;
            GBResumenCaja.Visibility = Visibility.Collapsed;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
            LimpiarCamposInformeRendicion();
        }


        //CLICK BOTON DE BARRA DE HERRAMIENTAS QUE ACTIVA LA ANULACION DE DOCUMENTOS
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            GBPagoDocs.Visibility = Visibility.Collapsed;
            GBInicio.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Visible;
            GBReimpresion.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Collapsed;
            GBRendicion.Visibility = Visibility.Collapsed;
            GBResumenCaja.Visibility = Visibility.Collapsed;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
            LimpiarCamposInformeRendicion();
        }
        
        
        //CLICK BOTON DE BARRA DE HERRAMIENTAS QUE ACTIVA LA REIMPRESION DE DOCUMENTOS
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            GBPagoDocs.Visibility = Visibility.Collapsed;
            GBInicio.Visibility = Visibility.Collapsed;
            //GBAnticipos.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Collapsed;
            GBReimpresion.Visibility = Visibility.Visible;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Collapsed;
            GBRendicion.Visibility = Visibility.Collapsed;
            GBResumenCaja.Visibility = Visibility.Collapsed;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
            LimpiarCamposInformeRendicion();
        }
        
        
        //BOTON DE BARRA DE HERRAMIENTAS PARA EL CIERRE DE CAJA
        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            GBPagoDocs.Visibility = Visibility.Collapsed;
            GBInicio.Visibility = Visibility.Collapsed;
            //GBAnticipos.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Collapsed;
            GBReimpresion.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Collapsed;
            GBMonitor.Visibility = Visibility.Collapsed;
            LimpiarCamposInformeRendicion();
            LimpiarViasDePago();
            GBRendicion.Visibility = Visibility.Visible;
            DPickDesde.Text = Convert.ToString(datePicker1.SelectedDate);
            DPickHasta.Text = Convert.ToString(datePicker1.SelectedDate);
            //GBResumenCaja.Visibility = Visibility.Visible;
            
           
           
        }
        
        
        //*** BOTON QUE DESPLIEGA EL GROUPBOX DE LAS FORMAS DE PAGO Y CALCULA EL MONTO DE LOS DOCUMENTOS SELECCIONADOS
        private void btnPagos_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                GBViasPago.Visibility = Visibility.Collapsed;
                cmbBancoProp.ItemsSource = null;
                cmbBancoProp.Items.Clear();
                cmbCuentasBancosProp.ItemsSource = null;
                cmbCuentasBancosProp.Items.Clear();
                cmbBanco.ItemsSource = null;
                cmbBanco.Items.Clear();
              //Calculo del monto para los documentos y partidas abiertas seleccionadas.
                partidaseleccionadas.Clear();
                if (this.DGPagos.SelectedItems.Count > 0)
                    for (int i = 0; i < DGPagos.SelectedItems.Count; i++)
                    {
                        {
                            partidaseleccionadas.Add(DGPagos.SelectedItems[i] as T_DOCUMENTOS);
                        }
                    }
                List<ViasPago> Condiciones = new List<ViasPago>();
                List<string> CondicionPago = new List<string>();
                string CondPago = "";

                ViasPago Condic;// = new ViasPago(acc, cond_pago, caja);
                for (int i = 0; i < partidaseleccionadas.Count; i++)
                {
                    try
                    {
                        if (partidaseleccionadas[i].COND_PAGO != "")
                        {
                            if (CondicionPago.Contains(partidaseleccionadas[i].COND_PAGO) == false)
                            {
                                CondicionPago.Add(partidaseleccionadas[i].COND_PAGO);
                                if (i == 0)
                                {
                                    CondPago = partidaseleccionadas[i].COND_PAGO;
                                }
                                else
                                {
                                    CondPago = CondPago + " - " + partidaseleccionadas[i].COND_PAGO;
                                }
                            }
                        }                        if (CondicionPago.Count < 2)
                        {
                            Condic = new ViasPago(partidaseleccionadas[i].ACC, partidaseleccionadas[i].COND_PAGO, partidaseleccionadas[i].CME);
                            Condic = new ViasPago(partidaseleccionadas[i].ACC, partidaseleccionadas[i].COND_PAGO, Convert.ToString(textBlock6.Content));
                            Condiciones.Add(Condic);
                        }
                        else
                        {
                            System.Windows.MessageBox.Show("Registros con dos o mas condiciones de pago distintas");
                            break;

                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message + ex.StackTrace);
                        System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                    }
                }

                if (CondicionPago.Count < 2)
                {
                    //RFC para consulta de estatus de cobro del cliente selecccionado
                    //partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtRut.Text,"", txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text));
                    DateTime Anual = datePicker1.SelectedDate.Value;
                    String EjercicioValue = Convert.ToString(Anual.Year);
                    //EstatusCobranza estatuscobranza = new EstatusCobranza();
                    //estatuscobranza.EstatusCobro(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content), txtRut.Text, "09", "M", "W", EjercicioValue);
                    //if (estatuscobranza.protestado == "")
                    //{
                    //    //estatuscobranza.protestado = "X";
                    //}
                    //else
                    //{
                    //    estatuscobranza.protestado = "X";
                    //    System.Windows.MessageBox.Show("Este cliente presenta cheque(s) protestado(s). " + estatuscobranza.message);
                    //}
                    //RFC que retorna las formas de pago de acuerdo a los registros seleccionados
                    MatrizDePago matrizpago = new MatrizDePago();
                    // List<ViasPago> LVP = new List<ViasPago>();
                    String Protesto = "";
                    if (GBPagoDocs.IsVisible)
                    {
                        if (tabItem1.IsSelected)
                        {
                            Protesto = partidasabiertas.protesto;
                        }
                        if (tabItem2.IsSelected)
                        {
                            Protesto = documentospagosmasivos.protesto;
                        }
                        if (tabItem3.IsSelected)
                        {
                            Protesto = anticipos.protesto;
                        }
                    }
                    //if (GBEmisionNC.IsVisible)
                    //{
                    //     Protesto = notasdecredito.protesto;
                    //}

                    matrizpago.viaspago(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content),Protesto, "D", "", Convert.ToString(lblPais.Content), Protesto, Condiciones);

                    if (matrizpago.ObjDatosViasPago.Count > 0)
                    {
                        cmbVPMedioPag.ItemsSource = null;
                        cmbVPMedioPag.Items.Clear();

                        List<string> VP = new List<string>();
                        for (int i = 0; i < matrizpago.ObjDatosViasPago.Count; i++)
                        {
                            VP.Add(matrizpago.ObjDatosViasPago[i].VIA_PAGO + " - " + matrizpago.ObjDatosViasPago[i].DESCRIPCION) ;
                        }
                        cmbVPMedioPag.ItemsSource = VP;
                        //cmbVPMedioPag.Items.Add(matrizpago.ObjDatosViasPago);
                        //   cmbVPMedioPag.ItemsSource = matrizpago.ObjDatosViasPago[i].VIA_PAGO + "-" + matrizpago.ObjDatosViasPago[i].DESCRIPCION;


                        int posicion = 0;
                        double Monto = 0;

                        for (int i = 0; i < partidaseleccionadas.Count; i++)
                        {
                            try
                            {
                                partidaseleccionadas[i].MONTOF = partidaseleccionadas[i].MONTOF.Trim();
                                if (partidaseleccionadas[i].MONTOF.Contains("-"))
                                {
                                    posicion = partidaseleccionadas[i].MONTOF.IndexOf("-");
                                    if (posicion == partidaseleccionadas[i].MONTOF.Length - 1)
                                    {
                                        partidaseleccionadas[i].MONTOF = partidaseleccionadas[i].MONTOF.Substring(posicion, 1) + partidaseleccionadas[i].MONTOF.Substring(0, posicion);
                                    }
                                }
                                if (partidaseleccionadas[i].MONTOF == "")
                                {
                                    partidaseleccionadas[i].MONTOF = "0";
                                }

                                Monto = Monto + Convert.ToDouble(partidaseleccionadas[i].MONTOF);

                                //  Monto = Monto + Convert.ToDouble(partidaseleccionadas[i].MONTOF);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message + ex.StackTrace);
                                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                            }
                        }
                        // string mount = string.Format(Convert.ToString(Monto), "##.###,##");
                        // textBlock4.Text = string.Format(Convert.ToString(Monto), "#####,##");
                        cmbBancoProp.ItemsSource = null;
                        cmbBancoProp.Items.Clear();
                        cmbCuentasBancosProp.ItemsSource = null;
                        cmbCuentasBancosProp.Items.Clear();
                        cmbBanco.ItemsSource = null;
                        cmbBanco.Items.Clear();
                       
                        textBlock4.Text = Convert.ToString(Monto);
                        txtMontoFP.Text = Convert.ToString(Monto);
                        GBViasPago.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                        GBViasPago.Margin = new Thickness(1, 406, 6, 0);
                        GBViasPago.VerticalAlignment = VerticalAlignment.Top;
                        lblCondPago.Content = CondPago;
                        GBViasPago.Visibility = Visibility.Visible;
                    }


                    else
                    {

                        System.Windows.MessageBox.Show("No existen condiciones de pago definidos para este cliente");
                    }
                }
                else
                {
                    DGPagos.UnselectAll();
                }
            }
            catch  (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
            }
            

        }
        
        
        //BOTON QUE DESPLIEGA EL GRID DE DOCUMENTOS POR PAGAR A PARTIR DE LA BUSQUEDA DE UN RUT O NUMERO DE DOCUMENTO
        private void btnBuscarP_Click(object sender, RoutedEventArgs e)
        {

            GBViasPago.Visibility = Visibility.Collapsed;
            ListaDocumentosPendientes();
            
           // btnBuscarPM.IsEnabled = false;
           
        }
        
        
        //BOTON QUE UBICA EL ARCHIVO A CARGAR EN PAGOS MASIVOS
        private void button3_Click(object sender, RoutedEventArgs e)
        {

            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Excel files (*.xlsx)|*.xlsx|Excel Old files (*.xls)|*.xls|All files (*.*)|*.*";
            if (Convert.ToBoolean(openFileDialog.ShowDialog()) == true)
                txtArchivo.Text = openFileDialog.InitialDirectory;
            //txtArchivo.Text = File.GetAttributes(openFileDialog.InitialDirectory.FileName);
            // txtArchivo.Text = File.ReadAllText(openFileDialog.FileName);
            txtArchivo.Text = openFileDialog.FileName;

        }


        ////BOTON QUE DESPLIEGA EL GRID DE DOCUMENTOS POR PAGAR DE MODO MASIVO A PARTIR DE LA BUSQUEDA DE UN RUT O NUMERO DE DOCUMENTO
        private void btnBuscarPM_Click(object sender, RoutedEventArgs e)
        {
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Visible;
            //Lectura del archivo excel de cargas masivas.
            ListaDocumentosPendientesCargasMasivas(txtArchivo.Text);
           
        }


        //CLICK DEL BOTON QUE MUESTRA LOS DOCUMENTOS PARA REALIZAR ANTICIPOS  
        private void button5_Click(object sender, RoutedEventArgs e)
        {
           
            //String RUT = DigitoVerificador(txtRUTAnt.Text.ToUpper());
            //if (RUT != txtRUTAnt.Text.ToUpper())
            //{
            //    System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
            //    txtRUTAnt.Focus();
            //}
            //else
            //{

                //GBViasPago.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                //GBViasPago.Margin = new Thickness(1, 218, 0, 0);
                //GBViasPago.VerticalAlignment = VerticalAlignment.Top;
                GBViasPago.Visibility = Visibility.Collapsed;
                ListaDocumentosPendientesAnticipos();
                DPFechActual.Text = datePicker1.Text;
                cheques.Clear();
                //label9.Visibility = Visibility.Visible;
                //cmbCeBe.Visibility= Visibility.Visible;
                //label10.Visibility=Visibility.Visible;
                //txtNotaVta.Visibility = Visibility.Visible;
               
           // }

        }

        
        //CLICK DEL BOTON DE LA BARRA DE HERRAMIENTAS INICIO
        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            GBInicio.Visibility = Visibility.Visible;
            GBPagoDocs.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Collapsed;
            GBReimpresion.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Collapsed;
            GBRendicion.Visibility = Visibility.Collapsed;
            GBResumenCaja.Visibility = Visibility.Collapsed;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
            LimpiarCamposInformeRendicion();
        }


        //BOTON PARA LA EMISION DE LAS NOTAS DE CREDITO (NC)
        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            GBInicio.Visibility = Visibility.Collapsed;
            GBPagoDocs.Visibility = Visibility.Collapsed;
            GBAnulacion.Visibility = Visibility.Collapsed;
            GBReimpresion.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            GBEmisionNC.Visibility = Visibility.Visible;
            GBRendicion.Visibility = Visibility.Collapsed;
            GBResumenCaja.Visibility = Visibility.Collapsed;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
            LimpiarCamposInformeRendicion();
           

        }

        
        //CLICK  QUE INGRESA LOS MONTOS DE LOS MEDIOS DE PAGOS EN LA GRILLA TOTALIZADORA 
        private void btnAgregaMto_Click(object sender, RoutedEventArgs e)
        {
            try
            {

            
            //InitializeComponent();
            if (cmbVPMedioPag.Text != "")
            {
                string MedioPago = cmbVPMedioPag.Text as string;
                MedioPago = MedioPago.Substring(0, 1);
                //cmbVPMedioPag.Text = "";
                //txtFechVenc.Text = "";
                //cmbBanco.Text = "";
                //cmbPlaza.Text = "";
                //txtNumDoc.Text = "";
                //txtMontoFP.Text = "";
                //txtNumCuenta.Text = "";
                //txtRUTGirador.Text = "";
                switch (MedioPago)
	            {
	                case "K": //Carta curse
                        {
                            if (DPFechVenc.Text != "")
                            {
                                if (txtNumDoc.Text != "")
                                {
                                    if (txtMontoFP.Text != "")
                                    {
                                        IngresoFormasDePagoYMontos(MedioPago);
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese el monto del pago por carta curse");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el número de la carta curse");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese la fecha de vencimiento");
                            }
                            break;
                        }
	                case "F": //Cheque a fecha
                        {
                            if (DPFechVenc.Text != "")
                            {
                                if (cmbBanco.Text != "")
                                {
                                    if (txtSucursal.Text != "")
                                    {
                                        if (txtNumDoc.Text != "")
                                        {
                                            if (txtMontoFP.Text != "")
                                            {
                                                if (txtNumCuenta.Text != "")
                                                {
                                                    if (txtRUTGirador.Text != "")
                                                    {
                                                        String RUT = DigitoVerificador(txtRUTGirador.Text.ToUpper());
                                                        if (txtRUTGirador.Text.ToUpper() != "")
                                                        {
                                                            if (RUT != txtRUTGirador.Text.ToUpper())
                                                            {
                                                                System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                                                                txtRUTGirador.Focus();
                                                            }
                                                            else
                                                            {
                                                                IngresoFormasDePagoYMontos(MedioPago);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        System.Windows.MessageBox.Show("Ingrese el Rut del girador");
                                                    }
                                                }
                                                else
                                                {
                                                    System.Windows.MessageBox.Show("Ingrese el número de la cuenta bancaria");
                                                }
                                            }
                                            else
                                            {
                                                System.Windows.MessageBox.Show("Ingrese el monto del cheque");
                                            }
                                        }
                                        else
                                        {
                                            System.Windows.MessageBox.Show("Ingrese el número de cheque");
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese la plaza");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el banco emisor");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese la fecha de vencimiento del cheque");
                            }
                            break;
                        }
	                case "G": //Cheque al día
                        {
                            //if (txtFechVenc.Text != "")
                            //{
                                if (cmbBanco.Text != "")
                                {
                                    if (txtSucursal.Text != "")
                                    {
                                        if (txtNumDoc.Text != "")
                                        {
                                            if (txtMontoFP.Text != "")
                                            {
                                                if (txtNumCuenta.Text != "")
                                                {
                                                    if (txtRUTGirador.Text != "")
                                                    {
                                                        String RUT = DigitoVerificador(txtRUTGirador.Text.ToUpper());
                                                        if (txtRUTGirador.Text.ToUpper() != "")
                                                        {
                                                            if (RUT != txtRUTGirador.Text.ToUpper())
                                                            {
                                                                System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                                                                txtRUTGirador.Focus();
                                                            }
                                                            else
                                                            {
                                                                IngresoFormasDePagoYMontos(MedioPago);
                                                            }
                                                        }
   
                                                    }
                                                    else
                                                    {
                                                        System.Windows.MessageBox.Show("Ingrese el Rut del girador");
                                                    }
                                                }
                                                else
                                                {
                                                    System.Windows.MessageBox.Show("Ingrese el número de la cuenta bancaria");
                                                }
                                            }
                                            else
                                            {
                                                System.Windows.MessageBox.Show("Ingrese el monto del cheque");
                                            }
                                        }
                                        else
                                        {
                                            System.Windows.MessageBox.Show("Ingrese el número de cheque");
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese la plaza");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el banco emisor");
                                }
                            //}
                            //else
                            //{
                            //    System.Windows.MessageBox.Show("Ingrese la fecha de vencimiento del cheque");
                            //}

                            break;
                        }
		            case "M": //Contrato compra-venta
                        {
                            if (txtMontoFP.Text != "")
                            {
                                IngresoFormasDePagoYMontos(MedioPago);
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el monto del pago por contrato");
                            }
                            break;
                        }
	                case "D": //Deposito a plazo
                        {
                            IngresoFormasDePagoYMontos(MedioPago);
                            break;
                        }
	                case "B": //Deposito en cliente corriente
                        {
                            if (cmbBanco.Text != "")
                            {
                                if (txtNumDoc.Text != "")
                                {
                                    if (txtMontoFP.Text != "")
                                    {
                                        IngresoFormasDePagoYMontos(MedioPago);
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese el monto del pago por depósito en cuenta corriente");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el número de depósito en cuenta corriente");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el banco del depósito en cuenta corriente");
                            }
                            break;
                        }
                    case "L": //Letras
                        {
                            IngresoFormasDePagoYMontos(MedioPago);
                            break;
                        }
	                case "P": //Pagaré
                        {
                            if (DPFechVenc.Text != "")
                            {
                                if (txtNumDoc.Text != "")
                                {
                                    if (txtMontoFP.Text != "")
                                    {
                                        IngresoFormasDePagoYMontos(MedioPago);
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese el monto del pago por pagaré");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el número del pagaré");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese la fecha de vencimiento del pagaré");
                            }
                            break;
                        }
	                case "E": //Pago en efectivo
                        {
                            if (txtMontoFP.Text != "")
                            {
                                IngresoFormasDePagoYMontos(MedioPago);
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el monto del pago en efectivo");
                            }
                            break;
                        }
		            case "S": //Tarjeta de crédito
                        {
                            if (txtNumDoc.Text != "")
                            {
                                if (txtMontoFP.Text != "")
                                {
                                     if (txtCodAut.Text != "")
                                     {
                                          if (txtCodOp.Text != "")
                                          {
                                                if (txtAsig.Text != "")
                                                {
                                                    if (cmbTipoTarjeta.Text != "")
                                                    {
                                                        IngresoFormasDePagoYMontos(MedioPago);
                                                    }
                                                    else
                                                    {
                                                        System.Windows.MessageBox.Show("Ingrese el tipo de tarjeta");
                                                    }
                                                }
                                                else
                                                {
                                                    System.Windows.MessageBox.Show("Ingrese la asignación por tarjeta");
                                                }
                                           }
                                           else
                                           {
                                                System.Windows.MessageBox.Show("Ingrese el código de operación por tarjeta");
                                           }
                                     }
                                     else
                                     {
                                         System.Windows.MessageBox.Show("Ingrese el código de autorización por tarjeta");
                                     }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el monto del pago por tarjeta");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el número de la tarjeta de crédito");
                            }
                            break;
                        }
	                case "R": //Tarjeta de débito
                        {
                            if (txtNumDoc.Text != "")
                            {
                                if (txtMontoFP.Text != "")
                                {
                                    if (txtCodAut.Text != "")
                                    {
                                        if (txtCodOp.Text != "")
                                        {
                                            if (txtAsig.Text != "")
                                            {
                                                //if (cmbTipoTarjeta.Text != "")
                                                //{
                                                    IngresoFormasDePagoYMontos(MedioPago);
                                                //}
                                                //else
                                                //{
                                                //    System.Windows.MessageBox.Show("Ingrese el tipo de tarjeta");
                                                //}
                                            }
                                            else
                                            {
                                                System.Windows.MessageBox.Show("Ingrese la asignación por tarjeta");
                                            }
                                        }
                                        else
                                        {
                                            System.Windows.MessageBox.Show("Ingrese el código de operación por tarjeta");
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Ingrese el código de autorización por tarjeta");
                                    }
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el monto del pago por tarjeta");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el número de la tarjeta de débito");
                            }
                            break;
                        }
	                case "U": //Transferencia bancaria
                        {
                            IngresoFormasDePagoYMontos(MedioPago);
                            break;
                        }
		            case "V": //Vale vista recibido
                        {
                            IngresoFormasDePagoYMontos(MedioPago);
                            break;
                        }
	                case "A": //Vehiculo en parte de pago
                        {
                            if (txtPatente.Text != "")
                            {
                                if (txtMontoFP.Text != "")
                                {
                                    IngresoFormasDePagoYMontos(MedioPago);
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Ingrese el monto del pago");
                                }
                            }
                            else
                            {
                                System.Windows.MessageBox.Show("Ingrese el número de la patente del vehículo");
                            }
                            break;

                        }
	                default:
                        {
                            break;
                        }
		            // You can use the default case.
		           
	            }
            }
            else
            {
                System.Windows.MessageBox.Show("Ingrese el tipo de documento (forma de pago)");
            }
          }
            catch  (Exception ex)
         {
               Console.WriteLine(ex.Message + ex.StackTrace);
               System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
               LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                 
            }

        }

        
        //CLICK QUE MUESTRA EL FORM DE RESUMEN DE PAGOS CON TODA LA INFORMACION DE LAS VIAS DE PAGO 
        private void btnResPagos_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                List<DetalleViasPago> ListViasPagos = new List<DetalleViasPago>();
                for (int i = 1; i <= DGCheque.Items.Count; i++)
                {
                    if (i == 1)
                    {
                        DGCheque.Items.MoveCurrentToFirst();
                    }
                    ListViasPagos.Add(DGCheque.Items.CurrentItem as DetalleViasPago);
                    DGCheque.Items.MoveCurrentToNext();
                }

                //LLAMADA AL FORM DE RESUMEN DE PAGOS
                ResumenViasPago frm = new ResumenViasPago();
                frm.DGResumenViasPago.ItemsSource = ListViasPagos;
                //frm.DialogResult = true;// = this;
                frm.Owner = this;
                frm.Show();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }

        }
        
        
        //BOTON QUE REALIZA EL PAGO Y CREACION DEL COMPROBANTE DE INGRESO DE NOTAS DE VENTAS Y PAGO DE ANTICIPOS
        private void btnConfirPag_Click(object sender, RoutedEventArgs e)
        {
            //*RFC PAGO DE DOCUMENTOS
            List<DetalleViasPago> ListViasPagos = new List<DetalleViasPago>();

            for (int i = 1; i <= DGCheque.Items.Count; i++)
            {
                if (i == 1)
                {
                    DGCheque.Items.MoveCurrentToFirst();
                }
                ListViasPagos.Add(DGCheque.Items.CurrentItem as DetalleViasPago);

                DGCheque.Items.MoveCurrentToNext();
            }


            List<T_DOCUMENTOS> DocsAPagar = new List<T_DOCUMENTOS>();
            for (int i = 0; i < DGPagos.SelectedItems.Count; i++)
            {
                {
                    DocsAPagar.Add(DGPagos.SelectedItems[i] as T_DOCUMENTOS);
                }
            }

            Int64 Ingreso = 0;
            for (int i = 0; i < ListViasPagos.Count; i++)
            {
                {
                    Ingreso = Ingreso + Convert.ToInt64(ListViasPagos[i].MONTO);
                }
            }
            double APagar2 = 0;
            Int64 APagar = 0;
            for (int i = 0; i < DocsAPagar.Count; i++)
            {
                {
                    //DocsAPagar[i].MONTO = DocsAPagar[i].MONTO.Replace(",", ".");
                    int Pos = DocsAPagar[i].MONTO.IndexOf(",");
                    string s = DocsAPagar[i].MONTO.Remove(Pos, 1);

                    //  string s = DocsAPagar[i].MONTO.Substring(0, Pos - 1);
                    APagar = APagar + Convert.ToInt64(s);
                    APagar2 = APagar2 + Convert.ToDouble(DocsAPagar[i].MONTO);
                }
            }


            bool pago = false;
            try
            {

                if (tabItem1.IsSelected)
                {
                    //*RFC PAGO DE DOCUMENTOS
                    //pagodocumentosingreso.pagodocumentosingreso(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content), DocsAPagar[i].NDOCTO, ViasPagoTransaccion, DocsAPagar, Convert.ToString(lblPais.Content), cmbMoneda.Text,Convert.ToString(textBlock6.Content), Convert.ToString(textBlock7.Content));
                    pagodocumentosingreso.pagodocumentosingreso(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content), ListViasPagos, DocsAPagar, Convert.ToString(lblPais.Content), cmbMoneda.Text, Convert.ToString(textBlock6.Content), Convert.ToString(textBlock7.Content), Convert.ToString(APagar2), Convert.ToString(APagar2));

                    string Mensaje = "";
                    for (int i = 0; i < pagodocumentosingreso.T_Retorno.Count; i++)
                    {
                        Mensaje = Mensaje + " - " + pagodocumentosingreso.T_Retorno[i].MESSAGE + " - " + pagodocumentosingreso.T_Retorno[i].MESSAGE_V1;
                    }
                    //System.Windows.MessageBox.Show(Mensaje);
                    if (pagodocumentosingreso.message != "")
                    {
                        System.Windows.MessageBox.Show(pagodocumentosingreso.message);
                    }
                    else
                    {
                        System.Windows.MessageBox.Show(pagodocumentosingreso.pagomessage);
                    }
                    LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), Mensaje);

                    if (pagodocumentosingreso.comprobante != "")
                    {
                        ImpresionesDeDocumentosAutomaticas(pagodocumentosingreso.comprobante);
                        
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("No se generó comprobante de pago");
                    }
                    DocsAPagar.Clear();
                    ListViasPagos.Clear();
                   
                    pagodocumentosingreso.T_Retorno.Clear();


                }
                if (tabItem3.IsSelected)
                {
                    //*RFC PAGO DE ANTICIPOS
                    pagoanticipos.pagoanticiposingreso(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content), ListViasPagos, DocsAPagar, Convert.ToString(lblPais.Content), cmbMoneda.Text, Convert.ToString(textBlock6.Content), Convert.ToString(textBlock7.Content), Convert.ToString(APagar2), Convert.ToString(APagar2), "");


                    string Mensaje = "";
                    // for (int i = 0; i < pagoanticipos.T_Retorno.Count; i++)
                    //{
                    //    Mensaje = Mensaje + " - " + pagoanticipos.T_Retorno[i].MESSAGE + " - " + pagodocumentosingreso.T_Retorno[i].MESSAGE_V1;
                    //}


                    if (pagoanticipos.message != "")
                    {
                        System.Windows.MessageBox.Show(pagoanticipos.message);
                    }
                    else
                    {
                        System.Windows.MessageBox.Show(pagoanticipos.status);
                    }
                   
                    LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), Mensaje);
                    if (pagoanticipos.comprobante != "")
                    {
                        ImpresionesDeDocumentosAutomaticas(pagoanticipos.comprobante);
                        //pagoanticipos.T_Retorno.Clear();
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("No se generó comprobante de pago");
                    }

                    pagoanticipos.T_Retorno.Clear();

                }

                //Limpiar aqui el resumen de las vias de pago
                LimpiarViasDePago();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                //               System.Windows.MessageBox.Show();
            }

        }
        
        
        //BOTON QUE LIMPIA LOS DATOS DE LA GRILLA DE RESUMEN DE VIAS DE PAGO Y CANTIDAD y TOTALES POR DOCUMENTOS Y A PAGAR
        private void Button_Click_7(object sender, RoutedEventArgs e)
        {
            DGCheque.ItemsSource = null;
            DGCheque.Items.Clear();
            DGMediosDePagos.ItemsSource = null;
            DGMediosDePagos.Items.Clear();
            cheques.Clear();
            textBlock3.Text = "";
            //textBlock4.Text = "";
            textBlock5.Text = "";
            btnConfirPag.IsEnabled = false;
        }
        
        
        //BUSQUEDA DE RUT DE DOCUMENTO A REIMPRIMIR
        private void btnBuscarReimp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
               
                if ((txtRUTReimp.Text == "") && (txtComprReimp.Text == ""))
                {
                    System.Windows.MessageBox.Show("Ingrese un RUT o un número de comprobante");

                }
                else
                {
                    if (chkDocFiscales.IsChecked == true)
                    {
                        ReimpresionFiscal reimpresionfiscal = new ReimpresionFiscal();
                        reimpresionfiscal.reimpresionfiscal(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprReimp.Text);

                        PDFViewer pdfvisor = new PDFViewer();
                       
                        string url_reimpresion = "";
                        url_reimpresion = reimpresionfiscal.url;
                        //url_reimpresion = "C:\\Users\\RafaelGuillermo\\Desktop\\Comprobante.pdf";
                        pdfvisor.webBrowser1.Navigate(url_reimpresion);
                        //GBReimpresionFiscal.Visibility = Visibility.Visible;
                        pdfvisor.Show();
                    }
                    else
                    {
                        ListaDocumentosReimpresion();
                        //btnReimpr.IsEnabled = true
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                //               System.Windows.MessageBox.Show();
            }
            
        }
        
        
        //BUSQUEDA DE DOCUMENTO POR ANULAR
        private void btnBuscarAnul_Click(object sender, RoutedEventArgs e)
        {
           txtUserAnula.Text = "";
           txtComentAnula.Text = "";
           if ((txtComprAn.Text == "") && (txtRUTAn.Text == "" ))
           {
               System.Windows.MessageBox.Show("Ingrese un RUT o un número de comprobante");
            
           }
           else
           {
               //RFC Y FORM QUE GENERAN VENTANA DE AUTORIZACION SOLO PARA EL SUPERUSUARIO QUE ANULA LOS COMPROBANTES
               //RFC
               //Autorizacion formautorizacion = new Autorizacion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(textBlock6.Content));
               ////LLAMADA AL FORM
               //formautorizacion.Owner = this;
               //formautorizacion.Show();  
               ListaDocumentosAnulacion();
           }
           LimpiarViasDePago();
            
        }


        //BOTON QUE EMITE NOTAS DE CREDITO
        public void btnBuscarNC_Click(object sender, RoutedEventArgs e)
        {
            if ((txtRUTNC.Text == "") && (txtComprNC.Text == ""))
            {
                System.Windows.MessageBox.Show("Ingrese un RUT o un número de comprobante");

            }
            else
            {
                ListaDocumentosNC();
            }
            //LimpiarViasDePago();
        }


        //BOTON QUE PERMITE HACER REIMPRESIONES DE COMPROBANTES
        public void btnReimpr_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                chkFiltro_Checked(chkFiltro, e);
            //LISTA DE DATOS DE VIAS DE PAGOS DEL DATAGRID DGDOCDET
                List<VIAS_PAGO2> ListViasPagos = new List<VIAS_PAGO2>();
                ListViasPagos.Clear();
                for (int i = 1; i <= DGDocDet.Items.Count; i++)
                {
                    if (i == 1)
                    {
                        DGDocDet.Items.MoveCurrentToFirst();
                    }
                    if (DGDocDet.Items.CurrentItem != null)
                    {
                        ListViasPagos.Add(DGDocDet.Items.CurrentItem as VIAS_PAGO2);
                    }

                    DGDocDet.Items.MoveCurrentToNext();
                }

                //LISTA DE DATOS DE LOS DOCUMENTOS A PAGAR DEL DATAGRID DGDOCCABEC
                List<DOCUMENTOS> DocsAPagar = new List<DOCUMENTOS>();
                DocsAPagar.Clear();
              
                for (int i = 0; i < DGDocCabec.SelectedItems.Count; i++)
                {
                    {
                        DocsAPagar.Add(DGDocCabec.SelectedItems[i] as DOCUMENTOS);
                    }
                }

                //for (int i = 0; i < DetalleDocs.Count; i++)
                //{
                //    detalle.Add(DetalleDocs[i]);
                //    if (CabeceraDocs[0].ID_COMPROBANTE == DetalleDocs[i].ID_COMPROBANTE)
                //    {
                //        detalleaux.Add(DetalleDocs[i]);
                //    }
                //}





                if (DocsAPagar.Count > 0)
                {


            

                ReimpresionComprobantes reimpresioncomprobantes = new ReimpresionComprobantes();
                reimpresioncomprobantes.reimprcomprobantes(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), ListViasPagos, DocsAPagar);

                   
                  
                string Nombre = reimpresioncomprobantes.DatosCliente[0].NOMBRE;
                string RUT = reimpresioncomprobantes.DatosCliente[0].RUT;
                string Caja = reimpresioncomprobantes.DatosCaja[0].NOM_CAJA;
                
                
                
                
                //LLAMADA AL FORM COMPROBANTES DESDE DONDE SE EMITE LA REIMPRESION DEL COMPROBANTE
                Comprobante frm = new Comprobante(reimpresioncomprobantes.DatosViaPago, reimpresioncomprobantes.DatosDocumentos, Nombre, RUT, Convert.ToString(textBlock7.Content)
                        , Convert.ToString(textBlock7.Content), Caja, DocsAPagar[0].NRO_DOCUMENTO, DocsAPagar[0].NRO_REFERENCIA);

                    //frm.DGPagos.ItemsSource = ;
                    //frm.DGResumenViasPago.ItemsSource = ListViasPagos;

                    frm.Show();
                    DocsAPagar.Clear();
                    ListViasPagos.Clear();
                    reimpresioncomprobantes.DatosViaPago.Clear();
                    reimpresioncomprobantes.DatosDocumentos.Clear();
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione un documento");
                    DocsAPagar.Clear();
                    ListViasPagos.Clear();
                }
                chkFiltro_UnChecked(chkFiltro, e);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                //               System.Windows.MessageBox.Show();
            }
        }

        //BOTON QUE LLEVA EL DATO SELECCIONADO DESDE EL MONITOR 
        private void btnPagoMonitor_Click(object sender, RoutedEventArgs e)
        {
            LimpiarViasDePago();
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            ListaDocumentosPendientesDesdeMonitor();
            //btnBuscarP.IsEnabled = false;
            GBDocsAPagar.Visibility = Visibility.Visible;
            GBViasPago.Visibility = Visibility.Visible;
            txtDocu.Text = "";
            txtDocuAnt.Text = "";
            txtRut.Text = "";
            txtRUTAnt.Text = "";
           
        }


        //ANULACION DE COMPROBANTES
        private void btnAnular_Click(object sender, RoutedEventArgs e)
        {

            //BUSQUEDA DEL COMPROBANTE SELECCIONADO
            string IdComprobante = "";
            List<CAB_COMP> Comprobante = new List<CAB_COMP>();
            for (int i = 0; i < DGDocCabec.SelectedItems.Count; i++)
            {
                {
                    Comprobante.Add(DGDocCabec.SelectedItems[i] as CAB_COMP);
                }
            }
            IdComprobante = Comprobante[0].ID_COMPROBANTE;

            if (Comprobante.Count != 1)
            {
                System.Windows.MessageBox.Show("Seleccione un comprobante en la tabla de cabeceras");
            }
            else
            {

                //RFC PARA ANULAR COMPROBANTES
                AnulacionComprobantes anulacioncomprobantes = new AnulacionComprobantes();
                anulacioncomprobantes.anulacioncomprobantes(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), IdComprobante, txtUserAnula.Text, txtComentAnula.Text, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content));
                //Limpieza de los datagrid con la data de cabecera y detalle de los comprobantes a anular 
                if (anulacioncomprobantes.Retorno.Count > 0)
                {
                    DGDocCabec.Items.Clear();
                    DGDocCabec.ItemsSource = null;
                    DGDocDet.Items.Clear();
                    DGDocDet.ItemsSource = null;
                    txtUserAnula.Text = "";
                    txtComentAnula.Text = "";
                    txtComprAn.Text = "";
                    txtRUTAn.Text = "";
                }

            }

        }

       

        #endregion

        //MANEJO DE LOS EVENTOS ASOCIADOS A LOS RADIOBUTTONS
        #region RadioButtons

        
        private void RBRutNC_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTNC.Text = "";
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            txtRUTNC.Visibility = Visibility.Visible;
            txtComprNC.Text = "";
            txtComprNC.Visibility = Visibility.Collapsed;
            btnBuscarNC.IsEnabled = true;
            //DocsAPagar = new List<CajaIndu.AppPersistencia.Class.NotasDeCredito.Estructura.T_DOCUMENTOS>();
            viaspagreimpr = new List<VIAS_PAGO2>();
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnEmitirNC.IsEnabled = true;
            //emisionNC = new Anticipos();
            //btnEmitirNC.IsEnabled = true;
        }
        

        private void RBDocNC_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTNC.Text = "";
            txtRUTNC.Visibility = Visibility.Collapsed;
            txtComprNC.Text = "";
            txtComprNC.Visibility = Visibility.Visible;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            btnBuscarNC.IsEnabled = true;
            //docsreimpr = new List<CajaIndu.AppPersistencia.Class.NotasDeCredito.Estructura.T_DOCUMENTOS>();
            viaspagreimpr = new List<VIAS_PAGO2>();
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnEmitirNC.IsEnabled = true;
            //emisionNC = new Anticipos();
            //btnEmitirNC.IsEnabled = true;
        }

        private void RBRutReimp_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTReimp.Text = "";
            txtRUTReimp.Visibility = Visibility.Visible;
            txtComprReimp.Text = "";
            txtComprReimp.Visibility = Visibility.Collapsed;
            docsreimpr = new List<DOCUMENTOS>();
            viaspagreimpr = new List<VIAS_PAGO2>();
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnBuscarReimp.IsEnabled = true;
            chkDocFiscales.IsChecked = false;
        }

        private void RBDocReimp_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTReimp.Text = "";
            txtRUTReimp.Visibility = Visibility.Collapsed;
            txtComprReimp.Text = "";
            txtComprReimp.Visibility = Visibility.Visible;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            docsreimpr = new List<DOCUMENTOS>();
            viaspagreimpr = new List<VIAS_PAGO2>();
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnBuscarReimp.IsEnabled = true;
        }

        private void RBRutAnul_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTAn.Text = "";
            txtRUTAn.Visibility = Visibility.Visible;
            txtComprAn.Text = "";
            txtComprAn.Visibility = Visibility.Collapsed;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            detalle = new List<DET_COMP>();         
            cabecera = new List<CAB_COMP>();
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnBuscarAnul.IsEnabled = true;
        }

        private void RBDocAnul_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTAn.Text = "";
            txtRUTAn.Visibility = Visibility.Collapsed;
            txtComprAn.Text = "";
            txtComprAn.Visibility = Visibility.Visible;
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            detalle = new List<DET_COMP>();
            cabecera = new List<CAB_COMP>();
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocDet.Items.Clear();
            btnBuscarAnul.IsEnabled = true;
        }

        private void RBRUTAnt_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTAnt.Text = "";
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            txtRUTAnt.Visibility = Visibility.Visible;
            txtDocuAnt.Text = "";
            txtDocuAnt.Visibility = Visibility.Collapsed;
            anticipos = new Anticipos();
            btnBuscarAnt.IsEnabled = true;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
        }

        private void RBDocuAnt_Checked(object sender, RoutedEventArgs e)
        {
            txtRUTAnt.Text = "";
            txtRUTAnt.Visibility = Visibility.Collapsed;
            txtDocuAnt.Text = "";
            txtDocuAnt.Visibility = Visibility.Visible;
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            anticipos = new Anticipos();
            btnBuscarAnt.IsEnabled = true;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
        }

        private void RBRut_Checked(object sender, RoutedEventArgs e)
        {
            txtRut.Text = "";
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            txtRut.Visibility = Visibility.Visible;
            txtDocu.Text = "";
            txtDocu.Visibility = Visibility.Collapsed;
            partidasabiertas = new PartidasAbiertas();
            btnBuscarP.IsEnabled = true;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
        }

        private void RBDoc_Checked(object sender, RoutedEventArgs e)
        {
            txtRut.Text = "";
            txtRut.Visibility = Visibility.Collapsed;
            txtDocu.Text = "";
            txtDocu.Visibility = Visibility.Visible;
            GBDocsAPagar.Visibility =  Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
            partidasabiertas = new PartidasAbiertas();
            btnBuscarP.IsEnabled = true;
            //Limpiar aqui el resumen de las vias de pago
            LimpiarViasDePago();
        }

         #endregion
        
        //MANEJO DE LOS EVENTOS ASOCIADOS A SELECCION DE LINEAS EN DATAGRID
        #region // SelectionChanged
        private void DGMonitor_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            timer.Stop();
        }
        #endregion

        //MANEJO DE LOS EVENTOS ASOCIADOS A LOS COMBOBOXS
        #region // ComboBox
        //RFC QUE LLENA LAS TARJETAS EN MEDIOS DE PAGOS
        private void RFC_Combo_Tarjetas()
        {
            cmbTipoTarjeta.ItemsSource = null;
            cmbTipoTarjeta.Items.Clear();
            maestrotarjetas.maestrotarjetas(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblPais.Content), Convert.ToString(cmbVPMedioPag.Text));
            if (maestrotarjetas.T_Retorno.Count > 0)
            {
                cmbTipoTarjeta.ItemsSource = null;
                cmbTipoTarjeta.Items.Clear();
                List<string> listatarjetas = new List<string>();
                listatarjetas.Clear();
                for (int i = 0; i < maestrotarjetas.T_Retorno.Count; i++)
                {
                    listatarjetas.Add(maestrotarjetas.T_Retorno[i].CCINS + " - " + maestrotarjetas.T_Retorno[i].VTEXT);
                }
                
                cmbTipoTarjeta.ItemsSource = listatarjetas;
            }
            else
            {
                System.Windows.Forms.MessageBox.Show("No existen datos de " + Convert.ToString(cmbVPMedioPag.Text).Substring(3, Convert.ToString(cmbVPMedioPag.Text).Length-3) + " en el sistema");
            }
        }
        //RFC QUE LLENA LOS BANCOS EN MEDIOS DE PAGOS
        private void RFC_Combo_Bancos()
        {
            maestrobancos.maestrobancos(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblPais.Content), Convert.ToString(cmbMoneda.Text), Convert.ToString(lblSociedad.Content));
            if (maestrobancos.T_Retorno.Count > 0)
            {
                cmbBancoProp.ItemsSource = null;
                cmbBancoProp.Items.Clear();
                cmbCuentasBancosProp.ItemsSource = null;
                cmbCuentasBancosProp.Items.Clear();
                cmbBanco.ItemsSource = null;
                cmbBanco.Items.Clear();
                List<string> listabancos = new List<string>();
                listabancos.Clear();
                for (int i = 0; i < maestrobancos.T_Retorno.Count; i++)
                {
                    listabancos.Add(maestrobancos.T_Retorno[i].BANKL + " - " + maestrobancos.T_Retorno[i].BANKA);
                }
                //cmbBanco.ItemsSource = maestrobancos.T_Retorno[0].BANKL + " - " + maestrobancos.T_Retorno[0].BANKA;
                cmbBanco.ItemsSource = listabancos;
            }
            else
            {
                System.Windows.Forms.MessageBox.Show("No existen datos de bancos en el sistema");
            }
        }
        //RFC PARA EL USO DE BANCOS PROPIOS Y CUENTAS ASOCIADAS EN MEDIOS DE PAGOS
        private void RFC_Combo_BancosPropios()
        {
            maestrobancos.maestrobancos(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblPais.Content), Convert.ToString(cmbMoneda.Text), Convert.ToString(lblSociedad.Content));
            if (maestrobancos.T_Retorno2.Count > 0)
            {
                cmbBancoProp.ItemsSource = null;
                cmbBancoProp.Items.Clear();
                cmbCuentasBancosProp.ItemsSource = null;
                cmbCuentasBancosProp.Items.Clear();
                cmbBanco.ItemsSource = null;
                cmbBanco.Items.Clear();
                List<string> listabancos = new List<string>();
                List<string> listabancosprop = new List<string>();
                List<string> cuentasbancosprop = new List<string>();
                listabancos.Clear();
                listabancosprop.Clear();
                cuentasbancosprop.Clear();
                for (int i = 0; i < maestrobancos.T_Retorno2.Count; i++)
                {
                    if (!listabancos.Contains(maestrobancos.T_Retorno2[i].BANKL + " - " + maestrobancos.T_Retorno2[i].BANKA))
                    {
                        listabancos.Add(maestrobancos.T_Retorno2[i].BANKL + " - " + maestrobancos.T_Retorno2[i].BANKA);
                    }
                }


                for (int i = 0; i < maestrobancos.T_Retorno2.Count; i++)
                {
                    if (!listabancosprop.Contains(maestrobancos.T_Retorno2[i].HBKID))
                    {
                        listabancosprop.Add(maestrobancos.T_Retorno2[i].HBKID);
                    }
                    if (!cuentasbancosprop.Contains(maestrobancos.T_Retorno2[i].BANKN))
                    {
                        cuentasbancosprop.Add(maestrobancos.T_Retorno2[i].BANKN);
                    }
                }
                //cmbBanco.ItemsSource = maestrobancos.T_Retorno[0].BANKL + " - " + maestrobancos.T_Retorno[0].BANKA;
                cmbBanco.ItemsSource = listabancos;
                cmbBancoProp.ItemsSource = listabancosprop;
                cmbCuentasBancosProp.ItemsSource = cuentasbancosprop;
            }
            else
            {
                System.Windows.Forms.MessageBox.Show("No existen datos de bancos propios en el sistema");
            }
        }
        //SELECCION DEL COMBOBOX DE BANCOS PROPIOS
        private void cmbBancoProp_DropDownClosed(object sender, EventArgs e)
        {
            int posicion;

            posicion = cmbBancoProp.SelectedIndex;
            cmbCuentasBancosProp.SelectedIndex = posicion;
        }
        //MUESTRA (VISIBILIDAD DE LOS ITEMS DE LOS MEDIOS DE PAGO A PARTIR DE LA SELECCION DEL COMBO DE MEDIOS DE PAGO
        private void cmbVPMedioPag_DropDownClosed(object sender, EventArgs e)
        {
            try
            {
                if (cmbVPMedioPag.Text != "")
                {
                    string MedioPago = cmbVPMedioPag.Text.Substring(0, 1);
                    cmbBancoProp.ItemsSource = null;
                    cmbBancoProp.Items.Clear();
                    cmbCuentasBancosProp.ItemsSource = null;
                    cmbCuentasBancosProp.Items.Clear();
                    cmbBanco.ItemsSource = null;
                    cmbBanco.Items.Clear();
                    switch (MedioPago)
                    {
                        case "K": //Carta curse
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Visible;
                                txtNumVenta.Visibility = Visibility.Visible;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Visible;
                                txtIfinan.Visibility = Visibility.Visible;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "F": //Cheque a fecha
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Visible;
                                txtCodAut.Visibility = Visibility.Visible;
                                btnAutorizacion.Visibility = Visibility.Visible;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Visible;
                                DPFechVenc.Visibility = Visibility.Visible;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Visible;
                                txtSucursal.Visibility = Visibility.Visible;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Visible;
                                txtNumCuenta.Visibility = Visibility.Visible;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Visible;
                                //txtCodAuto.Visibility = Visibility.Visible;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Visible;
                                txtCantDoc.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Visible;
                                cmbIntervalo.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "G": //Cheque al día
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Visible;
                                txtCodAut.Visibility = Visibility.Visible;
                                btnAutorizacion.Visibility = Visibility.Visible;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Visible;
                                txtSucursal.Visibility = Visibility.Visible;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Visible;
                                txtNumCuenta.Visibility = Visibility.Visible;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Visible;
                                //txtCodAuto.Visibility = Visibility.Visible;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "M": //Contrato compra-venta
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Visible;
                                DPFechVenc.Visibility = Visibility.Visible;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Visible;
                                txtObserv.Visibility = Visibility.Visible;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Visible;
                                txtCantDoc.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Visible;
                                cmbIntervalo.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "D": //Deposito a plazo
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Visible;
                                DPFechVenc.Visibility = Visibility.Visible;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Visible;
                                txtSucursal.Visibility = Visibility.Visible;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "B": //Deposito en cliente corriente
                            {
                                //RFC BANCO PROPIO
                                RFC_Combo_BancosPropios();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Visible;
                                cmbBancoProp.Visibility = Visibility.Visible;
                                cmbCuentasBancosProp.Visibility = Visibility.Visible;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Visible;
                                txtNumCuenta.Visibility = Visibility.Visible;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Collapsed;
                                txtNombreGira.Visibility = Visibility.Collapsed;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Visible;
                                txtObserv.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(146, 33, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(235, 33, 0, 0);
                                txtObserv.Width = 295;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                break;
                            }
                        case "L": //Letras
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Visible;
                                DPFechVenc.Visibility = Visibility.Visible;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Collapsed;
                                txtNumDoc.Visibility = Visibility.Collapsed;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Collapsed;
                                txtRUTGirador.Visibility = Visibility.Collapsed;
                                label38.Visibility = Visibility.Collapsed;
                                txtNombreGira.Visibility = Visibility.Collapsed;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Visible;
                                txtCantDoc.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Visible;
                                cmbIntervalo.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "P": //Pagaré
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Visible;
                                DPFechVenc.Visibility = Visibility.Visible;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Visible;
                                txtCantDoc.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Visible;
                                cmbIntervalo.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "E": //Pago en efectivo
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Collapsed;
                                txtNumDoc.Visibility = Visibility.Collapsed;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Collapsed;
                                txtRUTGirador.Visibility = Visibility.Collapsed;
                                label38.Visibility = Visibility.Collapsed;
                                txtNombreGira.Visibility = Visibility.Collapsed;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Visible;
                                txtObserv.Visibility = Visibility.Visible;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "S": //Tarjeta de crédito 
                            {
                                
                                RFC_Combo_Tarjetas();
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Visible; 
                                cmbTipoTarjeta.Visibility = Visibility.Visible;
                                label48.Visibility = Visibility.Visible;
                                txtCodAut.Visibility = Visibility.Visible;
                                btnAutorizacion.Visibility = Visibility.Visible;
                                label49.Visibility = Visibility.Visible;
                                txtCodOp.Visibility = Visibility.Visible;
                                label50.Visibility = Visibility.Visible;
                                txtAsig.Visibility = Visibility.Visible;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Collapsed;
                                txtRUTGirador.Visibility = Visibility.Collapsed;
                                label38.Visibility = Visibility.Collapsed;
                                txtNombreGira.Visibility = Visibility.Collapsed;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Visible;
                                txtCantDoc.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Visible;
                                cmbIntervalo.Visibility = Visibility.Visible;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "R": //Tarjeta de débito
                            {
                                RFC_Combo_Tarjetas();
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Visible;
                                txtCodAut.Visibility = Visibility.Visible;
                                btnAutorizacion.Visibility = Visibility.Visible;
                                label49.Visibility = Visibility.Visible;
                                txtCodOp.Visibility = Visibility.Visible;
                                label50.Visibility = Visibility.Visible;
                                txtAsig.Visibility = Visibility.Visible;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Collapsed;
                                txtRUTGirador.Visibility = Visibility.Collapsed;
                                label38.Visibility = Visibility.Collapsed;
                                txtNombreGira.Visibility = Visibility.Collapsed;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "U": //Transferencia bancaria
                            {
                                //RFC BANCO PROPIO
                                RFC_Combo_BancosPropios();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Visible;
                                cmbBancoProp.Visibility = Visibility.Visible;
                                cmbCuentasBancosProp.Visibility = Visibility.Visible;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Visible;
                                txtNumCuenta.Visibility = Visibility.Visible;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "V": //Vale vista recibido
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Collapsed;
                                DPFechActual.Visibility = Visibility.Collapsed;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Visible;
                                cmbBanco.Visibility = Visibility.Visible;
                                label27.Visibility = Visibility.Visible;
                                txtSucursal.Visibility = Visibility.Visible;
                                label28.Visibility = Visibility.Visible;
                                txtNumDoc.Visibility = Visibility.Visible;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Collapsed;
                                txtNumVenta.Visibility = Visibility.Collapsed;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Collapsed;
                                txtPatente.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label34.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;
                            }
                        case "A": //Vehiculo en parte de pago
                            {
                                RFC_Combo_Bancos();
                                label46.Visibility = Visibility.Collapsed;
                                cmbTipoTarjeta.Visibility = Visibility.Collapsed;
                                label48.Visibility = Visibility.Collapsed;
                                txtCodAut.Visibility = Visibility.Collapsed;
                                btnAutorizacion.Visibility = Visibility.Collapsed;
                                label49.Visibility = Visibility.Collapsed;
                                txtCodOp.Visibility = Visibility.Collapsed;
                                label50.Visibility = Visibility.Collapsed;
                                txtAsig.Visibility = Visibility.Collapsed;
                                label43.Visibility = Visibility.Collapsed;
                                cmbBancoProp.Visibility = Visibility.Collapsed;
                                cmbCuentasBancosProp.Visibility = Visibility.Collapsed;
                                label32.Visibility = Visibility.Visible;
                                DPFechActual.Visibility = Visibility.Visible;
                                label25.Visibility = Visibility.Collapsed;
                                DPFechVenc.Visibility = Visibility.Collapsed;
                                label26.Visibility = Visibility.Collapsed;
                                cmbBanco.Visibility = Visibility.Collapsed;
                                label27.Visibility = Visibility.Collapsed;
                                txtSucursal.Visibility = Visibility.Collapsed;
                                label28.Visibility = Visibility.Collapsed;
                                txtNumDoc.Visibility = Visibility.Collapsed;
                                label30.Visibility = Visibility.Collapsed;
                                txtNumCuenta.Visibility = Visibility.Collapsed;
                                label31.Visibility = Visibility.Visible;
                                txtRUTGirador.Visibility = Visibility.Visible;
                                label38.Visibility = Visibility.Visible;
                                txtNombreGira.Visibility = Visibility.Visible;
                                label39.Visibility = Visibility.Visible;
                                txtNumVenta.Visibility = Visibility.Visible;
                                label40.Visibility = Visibility.Collapsed;
                                txtObserv.Visibility = Visibility.Collapsed;
                                //label41.Visibility = Visibility.Collapsed;
                                //txtCodAuto.Visibility = Visibility.Collapsed;
                                label42.Visibility = Visibility.Collapsed;
                                txtIfinan.Visibility = Visibility.Collapsed;
                                lblPatente.Visibility = Visibility.Visible;
                                txtPatente.Visibility = Visibility.Visible;
                                label34.Visibility = Visibility.Collapsed;
                                txtCantDoc.Visibility = Visibility.Collapsed;
                                label33.Visibility = Visibility.Collapsed;
                                cmbIntervalo.Visibility = Visibility.Collapsed;
                                label40.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                label40.Margin = new Thickness(16, 64, 0, 0);
                                txtObserv.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                                txtObserv.Margin = new Thickness(136, 64, 0, 0);
                                txtObserv.Width = 389;
                                break;

                            }
                        default:
                            {
                                break;
                            }


                        // You can use the default case.


                        //if (MedioPago == "A")
                        //{
                        //    txtPatente.Visibility = Visibility.Visible;
                        //    lblPatente.Visibility = Visibility.Visible;
                        //}
                        //else
                        //{
                        //    txtPatente.Visibility = Visibility.Collapsed;
                        //    lblPatente.Visibility = Visibility.Collapsed;
                        //    cmbIntervalo.SelectedIndex = 0;
                        //    txtCantDoc.Text = "1";
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }


        #endregion

        //FUNCIONES y METODOS
        #region // Funciones

        void ImpresionesDeDocumentosAutomaticas(string comprobante)
        {
            BusquedaReimpresiones busquedareimpresiones = new BusquedaReimpresiones();
            busquedareimpresiones.docsreimpresion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), comprobante, "");

            ReimpresionComprobantes reimpresioncomprobantes = new ReimpresionComprobantes();
            reimpresioncomprobantes.reimprcomprobantes(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), busquedareimpresiones.ViasPago, busquedareimpresiones.Documentos);

            string Nombre = reimpresioncomprobantes.DatosCliente[0].NOMBRE;
            string RUT = reimpresioncomprobantes.DatosCliente[0].RUT;
            string Caja = reimpresioncomprobantes.DatosCaja[0].NOM_CAJA;
            string Documento = reimpresioncomprobantes.DatosDocumentos[0].NRO_DOCUMENTO;
            string Referencia = reimpresioncomprobantes.DatosCaja[0].ID_COMPROBANTE;
            //LLAMADA AL FORM COMPROBANTES DESDE DONDE SE EMITE LA REIMPRESION DEL COMPROBANTE
            Comprobante frm = new Comprobante(reimpresioncomprobantes.DatosViaPago, reimpresioncomprobantes.DatosDocumentos, Nombre, RUT, Convert.ToString(textBlock7.Content)
                    , Convert.ToString(textBlock7.Content), Caja, Referencia, Documento);
            frm.Show();

            //busquedareimpresiones.Retorno.Clear();
            //busquedareimpresiones.ViasPago.Clear();
            //busquedareimpresiones.Documentos.Clear();
            //reimpresioncomprobantes.DatosViaPago.Clear();
            //reimpresioncomprobantes.DatosDocumentos.Clear();

        }



        //FUNCION QUE CONTROLA LA LECTURA DE DATOS DE EL MONITOR
        void timer_Tick(object sender, EventArgs e)
        {
            try
            {
              
                //RFC del Monitor por Timer
                monitor.ObjDatosMonitor.Clear();
                monitor.monitor(Convert.ToString(datePicker1.SelectedDate.Value), Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(lblSociedad.Content));
                if (monitor.ObjDatosMonitor.Count > 0)
                {
                    DGMonitor.ItemsSource = null;
                    DGMonitor.Items.Clear();
                    DGMonitor.ItemsSource = monitor.ObjDatosMonitor;
                    // MessageBox.Show("Conectandose a la RFC del Monitor por timer c/ 10 seg");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }


        //FUNCION QUE HACE LA REVISION DEL DIGITO VERIFICADOR
        private string DigitoVerificador(string RUT)
        {
            string digito= "";
            string RUTsDV = "";
            string RUTcDV = "";
            int Total = 0;
            int j = 2;
            int modulo= 0;
            if (RUT.Contains("-"))
            {
                RUT = RUT.Substring(0, RUT.Length - 2);
            }
           
            for (int i = RUT.Length-1; i >= 0;  --i)
            {
                RUTsDV = RUTsDV + RUT[i];
            }
            for (int i = 0; i < RUTsDV.Length; i++)
            {
                digito = Convert.ToString(RUTsDV[i]);
                Total = Total + Convert.ToInt16(digito)*j;
                if (j < 7)
                {
                    j++;
                }
                else
                {
                    j= 2;
                }
            }
            modulo = Total % 11;
            Total = 11-modulo;
            digito = "";
            //Si el resultado es 11, el dígito verificador será 0 (cero).
            //Si el resultado es 10, el dígito verificador será K.
            //En otro caso, el resultado será el propio dígito verificador.
            switch (Total)
            {
                case 11: //Apertura de caja exitosa
                    {
                        digito = "0";
                        break;
                    }
                case 10: //Acceso a caja por usuario distinto al que realizo la apertura
                    {
                        digito = "K";
                        break;
                    }

                default:
                    {
                        digito = Convert.ToString(Total);
                        break;
                    }
            }
            RUTcDV = RUT + "-" + digito;
            return RUTcDV;
         

        }

        //FUNCION QUE TOMA EL INGRESO DE DETALLES DE MEDIOS Y FORMAS DE PAGO, MONTOS Y LLENA EL GRID RESUMEN DE PAGOS (DGCHEQUES).
        private void IngresoFormasDePagoYMontos(string MedioPago)
        {
            try
            {
                String FechaVenct;
                if (DPFechActual.Text == "")
                {
                    DPFechActual.Text = datePicker1.Text;
                    DPFechActual.Text = Convert.ToString(datePicker1.SelectedDate.Value);
                }

                if (DPFechVenc.Text != "")
                {
                    FechaVenct = DPFechVenc.Text.Substring(0, 10);
                    //FechaVenct = Convert.ToDateTime(
                    //     Convert.ToDateTime(txtFechVenc.Text.Substring(0, 10)).Year +
                    //     Convert.ToDateTime(txtFechVenc.Text.Substring(0, 10)).Month + 
                    //     Convert.ToDateTime(txtFechVenc.Text.Substring(0, 10)).Day) ;
                }
                else
                {
                    FechaVenct = DPFechActual.Text.Substring(0, 10);
                    //FechaVenct = Convert.ToDateTime(
                    //                         Convert.ToDateTime(txtFechActual.Text.Substring(0, 10)).Year +
                    //                         Convert.ToDateTime(txtFechActual.Text.Substring(0, 10)).Month +
                    //                         Convert.ToDateTime(txtFechActual.Text.Substring(0, 10)).Day);

                }
                string mandt = "";
                string land = Convert.ToString(lblPais.Content);
                string id_comprobante = "";
                string id_detalle = "";
                string via_pago = MedioPago;
                Int64 monto= Convert.ToInt64(txtMontoFP.Text);
                string moneda = cmbMoneda.Text;
                string banco = cmbBanco.Text;
                string emisor = txtRUTGirador.Text;
                string num_cheque = "";
                string cod_autorizacion = txtCodAut.Text;
                int num_cuotas;
                if (txtCantDoc.Text == "")
                {
                    txtCantDoc.Text = "0";
                }
                num_cuotas= Convert.ToInt16(txtCantDoc.Text);
                string fecha_venc = FechaVenct;
                string texto_posicion = txtObserv.Text;
                string anexo = "";
                string sucursal = txtSucursal.Text;
                string num_cuenta = txtNumCuenta.Text;
                string num_tarjeta = "";
                string num_vale_vista = "";
                string patente = txtPatente.Text;
                string num_venta = txtNumVenta.Text;
                string pagare = "";
                string fecha_emision = DPFechActual.Text;
                string nombre_girador = txtNombreGira.Text;
                string carta_curse = "";
                string num_transfer = "";
                string num_deposito = "";
                string cta_banco = cmbCuentasBancosProp.Text; 
                string ifinan = txtIfinan.Text;
                string zuonr = txtAsig.Text;
                string hkont = "";
                string prctr = "";
                string znop = txtCodOp.Text;
                //string Banco = cmbBanco.Text;
                //string Plaza = txtSucursal.Text;
                string NumDoc = txtNumDoc.Text;
                //Int64 Monto = Convert.ToInt64(txtMontoFP.Text);
                string NumCtaCte = txtNumCuenta.Text;
                //string RUTGirador = txtRUTGirador.Text;
                string Patente = txtPatente.Text;
                //int CantDocs = Convert.ToInt16(txtCantDoc.Text);
                if (cmbIntervalo.Text == "")
                {
                    cmbIntervalo.Text = "0";
                }
                int Intervalo = Convert.ToInt16(cmbIntervalo.Text);

                DetalleViasPago detcheq;
                if (num_cuotas < 2) //VIAS DE PAGO SIN CUOTAS

                {
                    //DEPENDIENDO DEL MEDIO DE PAGO SE HACE LA LOGICA PARA INCORPORAR EL NUMERO DEL MEDIO DE PAGO AL CAMPO CORRECTO DE LA RFC
                    switch (MedioPago)
                    {
                        case "B":
                            {
                                num_deposito = txtNumDoc.Text;
                                break;
                            }
                        case "D":
                            {
                                num_deposito = txtNumDoc.Text;
                                break;
                            }
                        case "F":
                            {
                                num_cheque = txtNumDoc.Text;
                                break;
                            }
                        case "G":
                            {
                                num_cheque = txtNumDoc.Text;
                                break;
                            }
                        case "K":
                            {
                                carta_curse = txtNumDoc.Text;
                                break;
                            }
                        case "M":
                            {
                                pagare = txtNumDoc.Text;
                                break;
                            }
                        case "P":
                            {
                                pagare = txtNumDoc.Text;
                                break;
                            }
                        case "R":
                            {
                                num_tarjeta = txtNumDoc.Text;
                                break;
                            }
                        case "S":
                            {
                                num_tarjeta = txtNumDoc.Text;
                                break;
                            }
                        case "U":
                            {
                                num_transfer = txtNumDoc.Text;
                                break;
                            }
                        case "V":
                            {
                                num_vale_vista = txtNumDoc.Text;
                                break;
                            }
                    }

                    detcheq = new DetalleViasPago(mandt, land, id_comprobante, id_detalle, via_pago, monto, moneda, banco, emisor
                        , num_cheque, cod_autorizacion, Convert.ToString(num_cuotas), fecha_venc, texto_posicion, anexo, sucursal, num_cuenta, num_tarjeta
                        , num_vale_vista, patente, num_venta, pagare, fecha_emision, nombre_girador, carta_curse, num_transfer, num_deposito
                        , cta_banco, ifinan, zuonr, hkont, prctr, znop);
                    cheques.Add(detcheq);
                }
                else
                {
                    
                        double montotot = 0;
                        double montores = 0;
                        int j = 0;
                        if (monto % num_cuotas == 0) //VIAS DE PAGO CON CUOTAS Y MONTO DE LA CUOTAS EXACTO
                        {
                            for (int i = 1; i <= num_cuotas; i++)
                            {
                                double montoaux = Convert.ToDouble(monto / num_cuotas);
                                // montotot = montotot + montoaux;
                                //montores = Convert.ToInt16(monto) - montotot;
                                j++;

                                if (i != 1) //CALCULO DE LAS FECHAS DE VENCIMIENTO DE ACUERDO AL NUMERO DE CUOTAS
                                {
                                    DateTime FechaVenctAux = Convert.ToDateTime(FechaVenct);
                                    FechaVenctAux = FechaVenctAux.AddDays(Intervalo);
                                    FechaVenct = Convert.ToString(FechaVenctAux);
                                    fecha_venc = Convert.ToString(FechaVenctAux);
                                    NumDoc = Convert.ToString(Convert.ToInt16(NumDoc) + 1);
                                }
                                //DEPENDIENDO DEL MEDIO DE PAGO SE HACE LA LOGICA PARA INCORPORAR EL NUMERO DEL MEDIO DE PAGO AL CAMPO CORRECTO DE LA RFC
                                switch (MedioPago)
                                {
                                    case "B":
                                        {
                                            num_deposito = NumDoc;
                                            break;
                                        }
                                    case "D":
                                        {
                                            num_deposito = NumDoc;
                                            break;
                                        }
                                    case "F":
                                        {
                                            num_cheque = NumDoc;
                                            break;
                                        }
                                    case "G":
                                        {
                                            num_cheque = NumDoc;
                                            break;
                                        }
                                    case "K":
                                        {
                                            carta_curse = NumDoc;
                                            break;
                                        }
                                    case "M":
                                        {
                                            pagare = NumDoc;
                                            break;
                                        }
                                    case "P":
                                        {
                                            pagare = NumDoc;
                                            break;
                                        }
                                    case "R":
                                        {
                                            num_tarjeta = NumDoc;
                                            break;
                                        }
                                    case "S":
                                        {
                                            num_tarjeta = NumDoc;
                                            break;
                                        }
                                    case "U":
                                        {
                                            num_transfer = NumDoc;
                                            break;
                                        }
                                    case "V":
                                        {
                                            num_vale_vista = NumDoc;
                                            break;
                                        }
                                }


                                detcheq = new DetalleViasPago(mandt, land, id_comprobante, id_detalle, via_pago,  Convert.ToInt64(Math.Round(montoaux,0)), moneda, banco, emisor
                                    , num_cheque, cod_autorizacion, Convert.ToString(num_cuotas), fecha_venc, texto_posicion, anexo, sucursal, num_cuenta, num_tarjeta
                                    , num_vale_vista, patente, num_venta, pagare, fecha_emision, nombre_girador, carta_curse, num_transfer, num_deposito
                                    , cta_banco, ifinan, zuonr, hkont, prctr, znop);
                                cheques.Add(detcheq);
                            } 
                        }
                        else //VIAS DE PAGO CON CUOTAS Y MONTO DE LA CUOTAS CON UN RESIDUO QUE SE SUMA EN LA CUOTA FINAL
                        {
                            for (int i = 1; i <= num_cuotas; i++)
                            {
                                double montoaux = Convert.ToDouble(monto / num_cuotas);
                                montotot = montotot +  Math.Round(montoaux,0); 
                                montores = (monto) - montotot;
                                j++;
                                if (i != 1) //VIAS DE PAGO CON CUOTAS Y MONTO DE LA CUOTAS EXACTO
                                {
                                    DateTime FechaVenctAux = Convert.ToDateTime(FechaVenct);
                                    FechaVenctAux = FechaVenctAux.AddDays(Intervalo);
                                    FechaVenct = Convert.ToString(FechaVenctAux);
                                    fecha_venc = Convert.ToString(FechaVenctAux);
                                    NumDoc = Convert.ToString(Convert.ToInt16(NumDoc) + 1);
                                }
                                //DEPENDIENDO DEL MEDIO DE PAGO SE HACE LA LOGICA PARA INCORPORAR EL NUMERO DEL MEDIO DE PAGO AL CAMPO CORRECTO DE LA RFC
                                switch (MedioPago)
                                {
                                    case "B":
                                        {
                                            num_deposito = NumDoc;
                                            break;
                                        }
                                    case "D":
                                        {
                                            num_deposito = NumDoc;
                                            break;
                                        }
                                    case "F":
                                        {
                                            num_cheque = NumDoc;
                                            break;
                                        }
                                    case "G":
                                        {
                                            num_cheque = NumDoc;
                                            break;
                                        }
                                    case "K":
                                        {
                                            carta_curse = NumDoc;
                                            break;
                                        }
                                    case "M":
                                        {
                                            pagare = NumDoc;
                                            break;
                                        }
                                    case "P":
                                        {
                                            pagare = NumDoc;
                                            break;
                                        }
                                    case "R":
                                        {
                                            num_tarjeta = NumDoc;
                                            break;
                                        }
                                    case "S":
                                        {
                                            num_tarjeta = NumDoc;
                                            break;
                                        }
                                    case "U":
                                        {
                                            num_transfer = NumDoc;
                                            break;
                                        }
                                    case "V":
                                        {
                                            num_vale_vista = NumDoc;
                                            break;
                                        }
                                }
                                if (j != num_cuotas)
                                {
                                    detcheq = new DetalleViasPago(mandt, land, id_comprobante, id_detalle, via_pago, Convert.ToInt64(Math.Round(montoaux, 0)), moneda, banco, emisor
                                     , num_cheque, cod_autorizacion, Convert.ToString(num_cuotas), fecha_venc, texto_posicion, anexo, sucursal, num_cuenta, num_tarjeta
                                     , num_vale_vista, patente, num_venta, pagare, fecha_emision, nombre_girador, carta_curse, num_transfer, num_deposito
                                     , cta_banco, ifinan, zuonr, hkont, prctr, znop);
                                    cheques.Add(detcheq);
                                }
                                else
                                {
                                    detcheq = new DetalleViasPago(mandt, land, id_comprobante, id_detalle, via_pago, Convert.ToInt64(Math.Round(montoaux, 0) + montores), moneda, banco, emisor
                                                                 , num_cheque, cod_autorizacion, Convert.ToString(num_cuotas), fecha_venc, texto_posicion, anexo, sucursal, num_cuenta, num_tarjeta
                                                                 , num_vale_vista, patente, num_venta, pagare, fecha_emision, nombre_girador, carta_curse, num_transfer, num_deposito
                                                                 , cta_banco, ifinan, zuonr, hkont, prctr, znop);
                                    cheques.Add(detcheq);
                                }
                            }
                    } 

                }
                
       
                if (DGCheque.Items.Count > 0)
                {
                    DGCheque.ItemsSource = null;
                    DGCheque.Items.Clear();

                }
                else
                {
                    DGCheque.Items.Clear();
                    DGCheque.ItemsSource = null;
                }

                DGCheque.ItemsSource = cheques;

                double MntTotalChq = 0;
                double TotalVPagos = 0;
                var items = new List<MontoMediosdePago>();

                for (int i = items.Count - 1; i >= 0; --i)
                {
                    items.RemoveAt(i);
                }

                if (DGMediosDePagos.Items.Count > 0)
                {
                    DGMediosDePagos.ItemsSource = null;
                    DGMediosDePagos.Items.Clear();

                }

                for (int i = 0; i <= cmbVPMedioPag.Items.Count - 1; i++)
                {
                    try
                    {
                        for (int j = 0; j <= cheques.Count - 1; j++)
                        {
                            if (Convert.ToString(cmbVPMedioPag.Items[i]).Substring(0, 1) == cheques[j].VIA_PAGO)
                                MntTotalChq = MntTotalChq + cheques[j].MONTO;
                        }
                        if (MntTotalChq != 0)
                        {
                            items.Add(new MontoMediosdePago(Convert.ToString(cmbVPMedioPag.Items[i]), MntTotalChq));
                            MntTotalChq = 0;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message + ex.StackTrace);
                    }
                }


                // ... Assign ItemsSource of DataGrid.
                for (int i = 0; i <= items.Count - 1; i++)
                {
                    TotalVPagos = TotalVPagos + items[i].Monto;
                }
                Int64 MntTotalPend = 0;
                for (int i = 0; i <= partidaseleccionadas.Count - 1; i++)
                {
                    MntTotalPend = MntTotalPend + Convert.ToInt64(partidaseleccionadas[i].MONTOF);
                }
                textBlock3.Text = Convert.ToString(TotalVPagos);
                textBlock4.Text = Convert.ToString(MntTotalPend);
                textBlock5.Text = Convert.ToString((MntTotalPend) - (TotalVPagos));

                if (textBlock5.Text == "0")
                {
                    btnConfirPag.IsEnabled = true;
                }
                if (Convert.ToDouble(textBlock5.Text) < 0)
                {
                    System.Windows.Forms.MessageBox.Show("Montos de vias de pago es superior a la cantidad a cancelar");
                    txtMontoFP.Text = "";
                    textBlock3.Text = "";
                    textBlock5.Text = "";
                    items.Clear();
                    cheques.Clear();
                }
                else
                {
                    DGMediosDePagos.ItemsSource = items;
                    DGMediosDePagos.ScrollIntoView(items[items.Count - 1]);

                    //cmbVPMedioPag.Text = "";
                    DPFechVenc.Text = "";
                    cmbBanco.Text = "";
                    txtSucursal.Text = "";
                    txtNumDoc.Text = "";
                    txtMontoFP.Text = "";
                    txtNumCuenta.Text = "";
                    txtRUTGirador.Text = "";
                    txtCantDoc.Text = "";
                    txtNombreGira.Text = "";
                    txtNumVenta.Text = "";
                    //txtCodAuto.Text = "";
                    txtIfinan.Text = "";
                    txtObserv.Text = "";
                    txtPatente.Text = "";
                    txtCodOp.Text = "";
                    txtCodAut.Text = "";
                    txtAsig.Text = "";
                    cmbTipoTarjeta.ItemsSource = null;
                    cmbTipoTarjeta.Items.Clear();
                    cmbBanco.ItemsSource = null;
                    cmbBanco.Items.Clear();
                    cmbBancoProp.ItemsSource = null;
                    cmbBancoProp.Items.Clear();
                    cmbCuentasBancosProp.ItemsSource = null;
                    cmbCuentasBancosProp.Items.Clear();
                    
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
            }

        }


        //FUNCION QUE TRAE EL DETALLE DE LOS REGISTROS DE LA GRILLA DE LAS PARTIDAS ABIERTAS Y/O NOTAS DE VENTAS Y LO CARGA EN UNA NUEVA VENTANA
        private void DGPagos_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {

            try
            {

                try
                {
                    partidaseleccionadas = new List<T_DOCUMENTOS>();
                    partidaseleccionadas.Clear();
                    partidaseleccionadas.Add(DGPagos.SelectedItem as T_DOCUMENTOS);

                    DetalleDocumentos detalle = new DetalleDocumentos(partidaseleccionadas[0].NDOCTO, partidaseleccionadas[0].NREF
                        , partidaseleccionadas[0].RUTCLI, partidaseleccionadas[0].COD_CLIENTE, partidaseleccionadas[0].NOMCLI
                        , partidaseleccionadas[0].CEBE, partidaseleccionadas[0].CONTROL_CREDITO, partidaseleccionadas[0].SOCIEDAD
                        , partidaseleccionadas[0].FECHA_DOC, partidaseleccionadas[0].FECVENCI, partidaseleccionadas[0].DIAS_ATRASO
                        , partidaseleccionadas[0].MONEDA, partidaseleccionadas[0].CLASE_DOC, partidaseleccionadas[0].CLASE_CUENTA
                        , partidaseleccionadas[0].CME, partidaseleccionadas[0].ACC, partidaseleccionadas[0].ESTADO
                        , partidaseleccionadas[0].COND_PAGO, partidaseleccionadas[0].MONTOF_PAGAR, partidaseleccionadas[0].MONTOF_ABON
                        , partidaseleccionadas[0].MONTOF);
                    detalle.Show();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message + ex.StackTrace);
                }
                this.Topmost = false;

            }


            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

                //textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;
                //textBlock8.Content = sucursal;
            }
        }


        //FUNCION QUE TRAE LOS DOCUMENTOS DESDE EL MONITOR
        private void ListaDocumentosPendientesDesdeMonitor() 
        {
            try
            {
                timer.Stop();
            //for (int i = 0; i <= detalledocs.Count - 1; i++)
            for (int i = detalledocs.Count - 1; i >= 0; --i)
            {
                detalledocs.RemoveAt(i);
            }


            DGPagos.ItemsSource = null;
            DGPagos.Items.Clear();

            // textBlock6.Content = cajaconect;
            // textBlock7.Content = usuariologg;

            if (DatPckPgDoc.Text == "")
            {
                DatPckPgDoc.Text = datePicker1.Text;
            }
            //Se busca el dato del documento en la grilla del monitor
            try
            {
               
                //Calculo del monto para los documentos y partidas abiertas seleccionadas.
                monitorseleccionado.Clear();
                if (this.DGMonitor.SelectedItems.Count > 0)
                    for (int i = 0; i < DGMonitor.SelectedItems.Count; i++)
                    {

                        {
                            monitorseleccionado.Add(DGMonitor.SelectedItems[i] as T_DOCUMENTOS);
                        }

                    }

                DGPagos.ItemsSource = null;
                DGPagos.Items.Clear();
                DGPagos.ItemsSource = monitorseleccionado;
                DGPagos.SelectAll();

                ////***RFC Partidas abiertas para pago busqueda por RUT

                //partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtRut.Text, "", txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text));



                //if (partidasabiertas.ObjDatosPartidasOpen.Count > 0)
                //{

                //    DGPagos.ItemsSource = null;
                //    DGPagos.Items.Clear();
                //    DGPagos.ItemsSource = partidasabiertas.ObjDatosPartidasOpen;

                //}

                //Calculo del monto para los documentos y partidas abiertas seleccionadas.
                partidaseleccionadas = new List<T_DOCUMENTOS>();

                int posicion = 0;
                if (this.DGPagos.SelectedItems.Count > 0)
                {
                    for (int i = 0; i < DGPagos.SelectedItems.Count; i++)
                    {

                        {
                            partidaseleccionadas.Add(DGPagos.SelectedItems[i] as T_DOCUMENTOS);
                        }

                    }

                    double Monto = 0;




                    for (int i = 0; i < monitorseleccionado.Count; i++)
                    {
                        if (monitorseleccionado[i].MONTOF == "")
                        {
                            monitorseleccionado[i].MONTOF = "0";
                        }
                        monitorseleccionado[i].MONTOF = monitorseleccionado[i].MONTOF.Trim();
                        if (monitorseleccionado[i].MONTOF.Contains("-"))
                        {
                            posicion = monitorseleccionado[i].MONTOF.IndexOf("-");
                            if (posicion == monitorseleccionado[i].MONTOF.Length - 1)
                            {
                                monitorseleccionado[i].MONTOF =monitorseleccionado[i].MONTOF.Substring(posicion, 1) + monitorseleccionado[i].MONTOF.Substring(0, posicion);
                            }
                        }
                        Monto = Monto + Convert.ToDouble(monitorseleccionado[i].MONTOF);
                    }
                    
                    textBlock4.Text = Convert.ToString(Monto);
                    GBViasPago.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
                    GBViasPago.Margin = new Thickness(1, 406, 6, 0);
                    GBViasPago.VerticalAlignment = VerticalAlignment.Top;
                    //txtCantDoc.Text = "1";
                    //cmbIntervalo.SelectedIndex = 0;
                    //  GBViasPago.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
            }

            //***RFC Partidas abiertas para pago busqueda por RUT

            //   partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtRut.Text, "", txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text));
          
          

            //if (partidasabiertas.ObjDatosPartidasOpen.Count > 0)
            //{

            //    DGPagos.ItemsSource = null;
            //    DGPagos.Items.Clear();
            //    DGPagos.ItemsSource = partidasabiertas.ObjDatosPartidasOpen;

            //}
            if (chkMonitor.IsChecked.Value)
            {
                timer.Start();
            }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
            }

        }


        //FUNCION QUE TRAE LOS DOCUMENTOS PENDIENTES O PARTIDAS ABIERTAS POR CARGAS MASIVAS
        private void ListaDocumentosPendientesCargasMasivas(string thisFileName)
        {
              try
            {

                string RutExc = "";
                string SocExc = "";
                List<PagosMasivos> ListaExc = new List<PagosMasivos>();
                
                //LLAMADO A LA FUNCION QUE LEE EL ARCHIVO EXCEL
                RecogerDatosExcel(thisFileName, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content),  ref SocExc, ref RutExc, out ListaExc,ref  PrgBarExcel);
               //RFC que trae los documentos leidos del archivo excel de cargas masivas
                documentospagosmasivos.pagosmasivos(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), RutExc, SocExc, ListaExc);

                DGPagos.ItemsSource = null;
                DGPagos.Items.Clear();
                if (documentospagosmasivos.ObjDatosPartidasOpen.Count > 0)
                {
                   DGPagos.ItemsSource = documentospagosmasivos.ObjDatosPartidasOpen;
                }          
              }
              catch (Exception ex)
              {
                  Console.WriteLine(ex.Message + ex.StackTrace);
                  System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                  LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);
                
              }
        }


        //FUNCION QUE TRAE LOS DOCUMENTOS A PAGAR A PARTIR DE UN ARCHIVO EXCEL
        static void RecogerDatosExcel(string ruta, string usuario, string sucursal, string idcaja, ref string SocExc, ref string RutExc, out List<PagosMasivos> ListaExc, ref System.Windows.Controls.ProgressBar PrgBarExcel) 
        {
            ListaExc = new List<PagosMasivos>();

            //Declaro las variables necesarias/
            Microsoft.Office.Interop.Excel._Application xlApp;
            Microsoft.Office.Interop.Excel._Workbook xlLibro;
            Microsoft.Office.Interop.Excel._Worksheet xlHoja1;
            Microsoft.Office.Interop.Excel.Sheets xlHojas;
           // Microsoft.Office.Interop.Excel.Sheets xlHojas2;
            
           
            //asigno la ruta dónde se encuentra el archivo
            string fileName = ruta;
           // inicializo la variable xlApp (referente a la aplicación)
            xlApp = new Microsoft.Office.Interop.Excel.Application();
            //Muestra la aplicación Excel si está en true
            xlApp.Visible = false;
           // Abrimos el libro a leer (documento excel)
            xlLibro = xlApp.Workbooks.Open(fileName);
            try
            {
                //Asignamos las hojas
                xlHojas = xlLibro.Sheets;
             
                try
                {
                    int k = 1;
                    //Asignamos la hoja con la que queremos trabajar: 
                    xlHoja1 = (Microsoft.Office.Interop.Excel._Worksheet)xlHojas["Hoja1"];
                    int n = xlHoja1.UsedRange.Rows.Count;
                    PrgBarExcel.Maximum = n;
                    int j = 4;
                    int m = 2;
                    int l = 1;
                    int verificador = 0;
                   SocExc = "";
                   RutExc = "";
                    //recorremos las celdas que queremos y sacamos los datos 
                    //10 es el número de filas que queremos que lea
                // System.Windows.Controls.ProgressBar  PrgBarExcel = new System.Windows.Controls.ProgressBar();
                   PrgBarExcel.Value = 0;
                   
                   //        TextInput("Cargando registros...");
                    for (int i = 3; i <= n; i++)
                    {
                        //string referencia = (string)xlHoja1.get_Range("A"+j).Text;
                        //string monto = (string)xlHoja1.get_Range("B"+j).Text;
                        if (verificador >= 2)
                        {
                          
                           
                            break;
                        }

                        if (((string)xlHoja1.Cells[j, "A"].Text != "") && ((string)xlHoja1.Cells[j, "B"].Text != "") && ((string)xlHoja1.Cells[j, "C"].Text != ""))
                        {
                            string referencia = (string)xlHoja1.Cells[j, "A"].Text;
                            string monto = (string)xlHoja1.Cells[j, "B"].Text;
                            string moneda = (string)xlHoja1.Cells[j, "C"].Text;
                            PagosMasivos pagosm = new PagosMasivos(referencia, monto, moneda);
                            ListaExc.Add(pagosm);
                            SocExc = (string)xlHoja1.Cells[m, "B"].Text;
                            RutExc = (string)xlHoja1.Cells[l, "B"].Text;
                            j++;
                            PrgBarExcel.Value = (PrgBarExcel.Value + 1);
                            //System.Threading.Thread.Sleep(100);
                           
                            
                        }
                        else
                        {
                            verificador++;

                        }

                    }
                    SocExc = (string)xlHoja1.Cells[m, "B"].Text;
                    RutExc = (string)xlHoja1.Cells[l, "B"].Text;
                   
                }
 

                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message + ex.StackTrace);
                    System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                    LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, usuario, idcaja, sucursal, ex.Message + ex.StackTrace);

                }
                if (ListaExc.Count == 0)
                {
                   //return ListaExc;
                    System.Windows.MessageBox.Show("Error en el archivo excel a cargar. Revise formato del archivo o el formato de la plantilla o si el archivo tiene datos");
                }
                else
                {

                   // return ListaExc;
                System.Windows.MessageBox.Show(Convert.ToString(ListaExc.Count) + " documentos cargados");
                }
            }

            finally
            {
                //Cerrar el Libro
                xlLibro.Close(false);
                //Cerrar la Aplicación
                xlApp.Quit();
                PrgBarExcel.Value = 0;
            }
   
            
            //catch (Exception ex)
            //{
            //    Console.WriteLine(ex.Message + ex.StackTrace);
            //}
        }

        //FUNCION QUE TRAE LOS DOCUMENTOS PARA NOTAS DE CREDITO A PARTIR DE LA BUSQUEDA POR RUT O DOCUMENTO
        private void ListaDocumentosNC()
        {
            try
            {
                //for (int i = 0; i <= detalledocs.Count - 1; i++)
                for (int i = detalledocs.Count - 1; i >= 0; --i)
                {
                    detalledocs.RemoveAt(i);
                }

                partidasabiertas.ObjDatosPartidasOpen.Clear();
                DGPagos.ItemsSource = null;
                DGPagos.Items.Clear();

                // textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;

                if (DatPckPgDoc.Text == "")
                {
                    DatPckPgDoc.Text = datePicker1.Text;
                }

                // PartidasAbiertas partidasabiertas = new PartidasAbiertas();

                if (RBRutNC.IsChecked == true)
                {
                    //***RFC Partidas abiertas para pago busqueda por RUT
                    String RUT = DigitoVerificador(txtRUTNC.Text.ToUpper());
                    //Verificacion de RUT
                    if (RUT != txtRUTNC.Text.ToUpper())
                    {
                        System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                        txtRUTNC.Focus();
                    }
                    else
                    {
                        notasdecredito.notasdecredito(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprNC.Text, txtRUTNC.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), "RUT");
                    }
                }

                else if (RBDocNC.IsChecked == true)
                {
                    //***RFC Partidas abiertas para pago busqueda por numero de documento
                    string Documento = "";
                    Documento = txtDocu.Text;
                    while (Documento.Length < 10)
                    {
                        Documento = "0" + Documento;
                    }
                    txtDocu.Text = Documento;

                    notasdecredito.notasdecredito(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprNC.Text, txtRUTNC.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), "Documento");
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione una forma de búsqueda por RUT o Número de documento");
                }

                if (notasdecredito.ObjDatosNC.Count > 0)
                {
                    //GBDocsAPagar.Visibility = Visibility.Visible;
                    GBDetalleDocs.Visibility = Visibility.Visible;
                    DGDocCabec.ItemsSource = null;
                    DGDocCabec.Items.Clear();
                    DGDocCabec.ItemsSource = notasdecredito.ObjDatosNC;
                    DGDocDet.ItemsSource = null;
                    DGDocDet.Items.Clear();
                    DGDocDet.ItemsSource = notasdecredito.ViasPago;

                    //DGPagos.ItemsSource = null;
                    //DGPagos.Items.Clear();
                    //DGPagos.ItemsSource = notasdecredito.ObjDatosNC;

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }

        }

        //FUNCION QUE TRAE LOS DOCUMENTOS A PAGAR A PARTIR DE LA BUSQUEDA POR RUT O DOCUMENTO
        private void ListaDocumentosPendientes()
        {
            try
            {
                //for (int i = 0; i <= detalledocs.Count - 1; i++)
                for (int i = detalledocs.Count - 1; i >= 0; --i)
                {
                    detalledocs.RemoveAt(i);
                }

                partidasabiertas.ObjDatosPartidasOpen.Clear();
                DGPagos.ItemsSource = null;
                DGPagos.Items.Clear();

                // textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;

                if (DatPckPgDoc.Text == "")
                {
                    DatPckPgDoc.Text = datePicker1.Text;
                }

                // PartidasAbiertas partidasabiertas = new PartidasAbiertas();
                if (RBRut.IsChecked == true)
                {
                    //***RFC Partidas abiertas para pago busqueda por RUT
                    String RUT = DigitoVerificador(txtRut.Text.ToUpper());
                    //Verificacion de RUT
                    if (RUT != txtRut.Text.ToUpper())
                    {
                        System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                        txtRut.Focus();
                    }
                    else
                    {
                       
                        partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content),"", txtDocu.Text, txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text), Convert.ToString(lblPais.Content),"", "RUT");
                    }
                }
                else if (RBDoc.IsChecked == true)
                {
                    //***RFC Partidas abiertas para pago busqueda por numero de documento
                    string Documento = "";
                    Documento = txtDocu.Text;
                    while (Documento.Length < 10)
                    {
                        Documento = "0" + Documento;
                    }
                    txtDocu.Text = Documento;
                   
                    partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), "", txtDocu.Text, txtRut.Text,Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text), Convert.ToString(lblPais.Content),"", "Documento");
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione una forma de búsqueda por RUT o Número de documento");
                }

                if (partidasabiertas.ObjDatosPartidasOpen.Count > 0)
                {
                    GBDocsAPagar.Visibility = Visibility.Visible;
                    DGPagos.ItemsSource = null;
                    DGPagos.Items.Clear();
                    DGPagos.ItemsSource = partidasabiertas.ObjDatosPartidasOpen;

                }
            }
            catch  (Exception ex)
            {
               Console.WriteLine(ex.Message + ex.StackTrace);
               System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
               LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }

        //FUNCION QUE TRAE LOS DOCUMENTOS A PAGAR POR ANTICIPOS A PARTIR DE LA BUSQUEDA POR RUT O DOCUMENTO
        private void ListaDocumentosPendientesAnticipos()
        {
            try
            {
                //for (int i = 0; i <= detalledocs.Count - 1; i++)
                for (int i = detalledocs.Count - 1; i >= 0; --i)
                {
                    detalledocs.RemoveAt(i);
                }

                anticipos.ObjDatosAnticipos.Clear();
                DGPagos.ItemsSource = null;
                DGPagos.Items.Clear();

                // textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;

                if (DatPckPgDoc.Text == "")
                {
                    DatPckPgDoc.Text = datePicker1.Text;
                }

                // PartidasAbiertas partidasabiertas = new PartidasAbiertas();
                if (RBRUTAnt.IsChecked == true)
                {
                    //***RFC Anticipos para pago busqueda por RUT
                    String RUT = DigitoVerificador(txtRUTAnt.Text.ToUpper());
                    //Verificacion de RUT
                    if (RUT != txtRUTAnt.Text.ToUpper())
                    {
                        System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                        txtRUTAnt.Focus();
                    }
                    else
                    {
                        anticipos.anticiposopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtDocuAnt.Text, txtRUTAnt.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), "RUT");
                       // partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), "", txtDocu.Text, txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text), Convert.ToString(lblPais.Content), "", "RUT");
                    }
                }
                else if (RBDocuAnt.IsChecked == true)
                {
                    string Documento = "";
                    Documento = txtDocuAnt.Text;
                    while (Documento.Length < 10)
                    {
                        Documento = "0" + Documento;
                    }
                    
                    //***RFC Anticipos para pago busqueda por numero de documento
                    anticipos.anticiposopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtDocuAnt.Text, txtRUTAnt.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), "Documento");
                    //partidasabiertas.partidasopen(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), "", txtDocu.Text, txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToDateTime(DatPckPgDoc.Text), Convert.ToString(lblPais.Content), "", "Documento");
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione una forma de búsqueda por RUT o Número de documento");
                }

                if (anticipos.ObjDatosAnticipos.Count > 0)
                {
                    GBDocsAPagar.Visibility = Visibility.Visible;
                    DGPagos.ItemsSource = null;
                    DGPagos.Items.Clear();
                    DGPagos.ItemsSource = anticipos.ObjDatosAnticipos;

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }

        //FUNCION QUE TRAE LOS DOCUMENTOS A ANULAR
        public void ListaDocumentosAnulacion()
        {
            try
            {
                //for (int i = 0; i <= detalledocs.Count - 1; i++)
                for (int i = detalledocs.Count - 1; i >= 0; --i)
                {
                    detalledocs.RemoveAt(i);
                }
                BusquedaAnulacion busquedaanulacion = new BusquedaAnulacion();
               
               
                DGDocCabec.ItemsSource = null;
                DGDocCabec.Items.Clear();

                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();

                // textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;

              
                // PartidasAbiertas partidasabiertas = new PartidasAbiertas();
                if (RBRutAnul.IsChecked == true)
                {
                    //***RFC Partidas abiertas para ANULACION busqueda por RUT
                    String RUT = DigitoVerificador(txtRUTAn.Text.ToUpper());
                    //Verificacion de RUT
                    if (RUT != txtRUTAn.Text.ToUpper())
                    {
                        System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                        txtRUTAn.Focus();
                    }
                    else
                    {
                        busquedaanulacion.docsanulacion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprAn.Text, txtRUTAn.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), Convert.ToString(textBlock6.Content));
                    }
                }
                else if (RBDocAnul.IsChecked == true) 
                {
                    //***RFC Partidas abiertas para ANULACION busqueda por numero de documento
                    string Documento = "";
                    Documento = txtComprAn.Text;
                    while (Documento.Length < 10)
                    {
                        Documento = "0" + Documento;
                        
                    }
                    txtComprAn.Text = Documento;

                    busquedaanulacion.docsanulacion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprAn.Text, txtRut.Text, Convert.ToString(lblSociedad.Content), Convert.ToString(lblPais.Content), Convert.ToString(textBlock6.Content));
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione una forma de búsqueda por RUT o Número de documento");
                }
                //Limpieza de los datagrid con la data de cabecera y detalle de los comprobantes a anular 
                if (busquedaanulacion.CabeceraDocs.Count > 0)
                {
                    GBDetalleDocs.Visibility = Visibility.Visible;
                    DGDocCabec.ItemsSource = null;
                    DGDocCabec.Items.Clear();
                    DGDocCabec.ItemsSource = busquedaanulacion.CabeceraDocs;
                    DGDocDet.ItemsSource = null;
                    DGDocDet.Items.Clear();
                    DGDocDet.ItemsSource = busquedaanulacion.DetalleDocs;
                    btnAnular.IsEnabled = true;
                }
                busquedaanulacion.CabeceraDocs.Clear();
                busquedaanulacion.DetalleDocs.Clear();
                busquedaanulacion.Retorno.Clear();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }

        //FUNCION QUE TRAE LOS DOCUMENTOS A REIMPRIMIR
        private void ListaDocumentosReimpresion()
        {
            try
            {
                //for (int i = 0; i <= detalledocs.Count - 1; i++)
                for (int i = detalledocs.Count - 1; i >= 0; --i)
                {
                    detalledocs.RemoveAt(i);
                }

                BusquedaReimpresiones busquedareimpresiones = new BusquedaReimpresiones();
               

                DGDocCabec.ItemsSource = null;
                DGDocCabec.Items.Clear();

                DGDocDet.ItemsSource = null;
                DGDocDet.Items.Clear();

                // textBlock6.Content = cajaconect;
                // textBlock7.Content = usuariologg;


                // PartidasAbiertas partidasabiertas = new PartidasAbiertas();
                if (RBRutReimp.IsChecked == true)
                {
                    //***RFC Partidas abiertas para REIMPRESION busqueda por RUT
                    String RUT = DigitoVerificador(txtRUTReimp.Text.ToUpper());
                    //Verificacion de RUT
                    if (RUT != txtRUTReimp.Text.ToUpper())
                    {
                        System.Windows.Forms.MessageBox.Show("Número de RUT inválido");
                        txtRUTReimp.Focus();
                    }
                    else
                    {
                        busquedareimpresiones.docsreimpresion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprReimp.Text, txtRUTReimp.Text);
                    }
                }
                else if (RBDocReimp.IsChecked == true)
                {
                    //***RFC Partidas abiertas para REIMPRESION busqueda por numero de documento
                    string Documento = "";
                    Documento = txtComprReimp.Text;
                    while (Documento.Length < 10)
                    {
                        Documento = "0" + Documento;

                    }
                    txtComprReimp.Text = Documento;

                    busquedareimpresiones.docsreimpresion(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), txtComprReimp.Text, txtRUTReimp.Text);
                }
                else
                {
                    System.Windows.MessageBox.Show("Seleccione una forma de búsqueda por RUT o Número de documento");
                }
                //Limpieza de los datagrid con la data de cabecera y detalle de los comprobantes a anular 
                if (busquedareimpresiones.Documentos.Count > 0)
                {
                    GBDetalleDocs.Visibility = Visibility.Visible;
                    DGDocCabec.ItemsSource = null;
                    DGDocCabec.Items.Clear();
                    DGDocCabec.ItemsSource = busquedareimpresiones.Documentos;
                    DGDocDet.ItemsSource = null;
                    DGDocDet.Items.Clear();
                    DGDocDet.ItemsSource = busquedareimpresiones.ViasPago;
                    btnReimpr.IsEnabled = true;
                }
                //busquedareimpresiones.Documentos.Clear();
                //busquedareimpresiones.ViasPago.Clear();
                //busquedareimpresiones.Retorno.Clear();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message + ex.StackTrace);
                System.Windows.MessageBox.Show(ex.Message + ex.StackTrace);
                LogCajaIndu.EscribeLogCajaIndumotora(System.DateTime.Now, Convert.ToString(textBlock7.Content), Convert.ToString(textBlock6.Content), Convert.ToString(textBlock8.Content), ex.Message + ex.StackTrace);

            }
        }

        //FUNCION QUE LIMPIA TODOS LOS ELEMENTOS PRESENTES EN LAS VIAS DE PAGO
        private void LimpiarViasDePago()
        {
            //Limpiar aqui el resumen de las vias de pago
            textBlock3.Text = "";
            textBlock4.Text = "";
            textBlock5.Text = "";
            DGPagos.ItemsSource = null;
            DGPagos.Items.Clear();
            DGCheque.ItemsSource = null;
            DGCheque.Items.Clear();
            DGMediosDePagos.ItemsSource = null;
            DGMediosDePagos.Items.Clear();
            cheques.Clear();
            txtNombreGira.Text = "";
            txtDocu.Text = "";
            txtDocuAnt.Text = "";
            txtRut.Text = "";
            txtRUTAnt.Text = "";
           
            btnConfirPag.IsEnabled = false;

            label32.Visibility = Visibility.Collapsed;
            DPFechActual.Visibility = Visibility.Collapsed;
            label25.Visibility = Visibility.Collapsed;
            DPFechVenc.Visibility = Visibility.Collapsed;
            label26.Visibility = Visibility.Collapsed;
            cmbBanco.Visibility = Visibility.Collapsed;
            label27.Visibility = Visibility.Collapsed;
            txtSucursal.Visibility = Visibility.Collapsed;
            label28.Visibility = Visibility.Collapsed;
            txtNumDoc.Visibility = Visibility.Collapsed;
            label30.Visibility = Visibility.Collapsed;
            txtNumCuenta.Visibility = Visibility.Collapsed;
            label31.Visibility = Visibility.Collapsed;
            txtRUTGirador.Visibility = Visibility.Collapsed;
            label38.Visibility = Visibility.Collapsed;
            txtNombreGira.Visibility = Visibility.Collapsed;
            label39.Visibility = Visibility.Collapsed;
            txtNumVenta.Visibility = Visibility.Collapsed;
            label40.Visibility = Visibility.Collapsed;
            txtObserv.Visibility = Visibility.Collapsed;
            //label41.Visibility = Visibility.Collapsed;
            //txtCodAuto.Visibility = Visibility.Collapsed;
            label42.Visibility = Visibility.Collapsed;
            txtIfinan.Visibility = Visibility.Collapsed;
            lblPatente.Visibility = Visibility.Collapsed;
            txtPatente.Visibility = Visibility.Collapsed;
            label33.Visibility = Visibility.Collapsed;
            txtCantDoc.Visibility = Visibility.Collapsed;
            label34.Visibility = Visibility.Collapsed;
            cmbIntervalo.Visibility = Visibility.Collapsed;
            GBViasPago.Visibility = Visibility.Collapsed;
        }

#endregion 

      

        private void Button_Click_9(object sender, RoutedEventArgs e)
        {

            var logapertura = new List<LOG_APERTURA>();

           // LogOpen.BLOQUEO = DGLogApertura.Items.CurrentItem[i].
            for (int i = 1; i < DGLogApertura.Items.Count; i++)
            {
                LogOpen = DGLogApertura.Items.CurrentItem as LOG_APERTURA;
                logapertura.Add(LogOpen);
            }
            
            
            BloquearCaja bloquearcaja = new BloquearCaja();
            bloquearcaja.bloqueardesbloquearcaja(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), logapertura);
            this.Close();
        }

        private void Window_Closed()
        {
            MainWindow frm = new MainWindow();
            frm.Visibility = Visibility.Visible;
            frm.Show();
        }

        private void chkDocFiscales_Checked(object sender, RoutedEventArgs e)
        {
            RBDocReimp.IsChecked = true;
            txtComprReimp.Text = "";
            txtRUTReimp.Text = "";
            DGPagos.ItemsSource = null;
            DGPagos.Items.Clear();
            GBDetalleDocs.Visibility = Visibility.Collapsed;
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocCabec.Items.Clear();
            //btnReimpr.IsEnabled = false;
            btnReimpr.Visibility = Visibility.Collapsed;
            btnBuscarReimp.Content = "Reimprimir";
        }

        private void chkDocFiscales_Unchecked(object sender, RoutedEventArgs e)
        {
            RBDocReimp.IsChecked = false;
            txtComprReimp.Text = "";
            txtRUTReimp.Text = "";
            GBDocsAPagar.Visibility = Visibility.Collapsed;
            DGPagos.ItemsSource = null;
            DGPagos.Items.Clear();
            DGDocCabec.ItemsSource = null;
            DGDocCabec.Items.Clear();
            DGDocDet.ItemsSource = null;
            DGDocCabec.Items.Clear();
            //btnReimpr.IsEnabled = true;
            btnReimpr.Visibility = Visibility.Visible;
            btnBuscarReimp.Content = "Buscar";
        }

        private void btnRendir_Click(object sender, RoutedEventArgs e)
        {
            //RFC Rendicion Caja
            RendicionCaja rendicioncaja = new RendicionCaja();
            rendicioncaja.rendicioncaja(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(textBlock6.Content), DPickDesde.Text, DPickHasta.Text, Convert.ToString(textBlock7.Content));

            GBResumenCaja.Visibility = Visibility.Visible;
            DGResumenCaja.ItemsSource = null;
            DGResumenCaja.Items.Clear();
            DGResumenCaja.ItemsSource = rendicioncaja.detalle_rend;

            txtMEfect.Text = Convert.ToString(rendicioncaja.MontoEfect);
            txtMChqDia.Text = Convert.ToString(rendicioncaja.MontoChqDia);
            txtMChqFech.Text = Convert.ToString(rendicioncaja.MontoChqFech);
            txtMTransf.Text = Convert.ToString(rendicioncaja.MontoTransf);
            txtMValeV.Text = Convert.ToString(rendicioncaja.MontoValeV);
            txtMDepos.Text = Convert.ToString(rendicioncaja.MontoDepot);
            txtMTarj.Text = Convert.ToString(rendicioncaja.MontoTarj);
            txtMFinanc.Text = Convert.ToString(rendicioncaja.MontoFinanc);
            txtMApp.Text = Convert.ToString(rendicioncaja.MontoApp);
            txtMCredit.Text = Convert.ToString(rendicioncaja.MontoCredit);
            txtMEgresos.Text = Convert.ToString(rendicioncaja.MontoEgresos);
            txtMIngresos.Text = Convert.ToString(rendicioncaja.MontoIngresos);
            txtMFFijo.Text = Convert.ToString(rendicioncaja.MontoFondosFijos);
            txtMSaldoF.Text= Convert.ToString(rendicioncaja.SaldoTotal);
        
        }

        private void LimpiarCamposInformeRendicion()
        {

            DGResumenCaja.ItemsSource = null;
            DGResumenCaja.Items.Clear();


            txtMEfect.Text = "";
            txtMChqDia.Text = "";
            txtMChqFech.Text = "";
            txtMTransf.Text = "";
            txtMValeV.Text = "";
            txtMDepos.Text = "";
            txtMTarj.Text = "";
            txtMFinanc.Text = "";
            txtMApp.Text = "";
            txtMCredit.Text = "";
            txtMEgresos.Text = "";
            txtMIngresos.Text = "";
            txtMFFijo.Text = "";
            txtMSaldoF.Text = "";
        }

        private void btnArqueo_Click(object sender, RoutedEventArgs e)
        {
            //***RFC cierre de Caja
            CierreCaja cierrecaja = new CierreCaja();
            cierrecaja.cierrecaja(Convert.ToString(textBlock7.Content), Convert.ToString(lblPassword.Content), Convert.ToString(textBlock6.Content), Convert.ToString(lblPais.Content), "5000", "1000", "Probando 1", "Probando 2");
            System.Windows.Forms.MessageBox.Show(cierrecaja.T_Retorno[0].MESSAGE.ToString());
            if (cierrecaja.status == "S")
            {
                this.IsEnabled = false;
                this.Close();

            MainWindow frm = new MainWindow();
            frm.Visibility = Visibility.Visible;
            //frm.Show();

            }
        }





           



//#region IForm Members

//        public void BuscaAutorizacion(string text)
//        {
//            if (text == "X")
//            {
//                ListaDocumentosAnulacion();
//                //GBDetalleDocs.Visibility = Visibility.Visible;
//            }
           
//        }
  
//#endregion



    }
}
